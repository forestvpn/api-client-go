/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// checks if the DeviceRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceRecord{}

// DeviceRecord struct for DeviceRecord
type DeviceRecord struct {
	Id *string `json:"id,omitempty"`
	Date *string `json:"date,omitempty"`
	ReceivedBytes *float32 `json:"received_bytes,omitempty"`
	TransmittedBytes *float32 `json:"transmitted_bytes,omitempty"`
	UsageTime *float32 `json:"usage_time,omitempty"`
}

// NewDeviceRecord instantiates a new DeviceRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceRecord() *DeviceRecord {
	this := DeviceRecord{}
	return &this
}

// NewDeviceRecordWithDefaults instantiates a new DeviceRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceRecordWithDefaults() *DeviceRecord {
	this := DeviceRecord{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceRecord) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRecord) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceRecord) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceRecord) SetId(v string) {
	o.Id = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DeviceRecord) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRecord) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DeviceRecord) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *DeviceRecord) SetDate(v string) {
	o.Date = &v
}

// GetReceivedBytes returns the ReceivedBytes field value if set, zero value otherwise.
func (o *DeviceRecord) GetReceivedBytes() float32 {
	if o == nil || isNil(o.ReceivedBytes) {
		var ret float32
		return ret
	}
	return *o.ReceivedBytes
}

// GetReceivedBytesOk returns a tuple with the ReceivedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRecord) GetReceivedBytesOk() (*float32, bool) {
	if o == nil || isNil(o.ReceivedBytes) {
		return nil, false
	}
	return o.ReceivedBytes, true
}

// HasReceivedBytes returns a boolean if a field has been set.
func (o *DeviceRecord) HasReceivedBytes() bool {
	if o != nil && !isNil(o.ReceivedBytes) {
		return true
	}

	return false
}

// SetReceivedBytes gets a reference to the given float32 and assigns it to the ReceivedBytes field.
func (o *DeviceRecord) SetReceivedBytes(v float32) {
	o.ReceivedBytes = &v
}

// GetTransmittedBytes returns the TransmittedBytes field value if set, zero value otherwise.
func (o *DeviceRecord) GetTransmittedBytes() float32 {
	if o == nil || isNil(o.TransmittedBytes) {
		var ret float32
		return ret
	}
	return *o.TransmittedBytes
}

// GetTransmittedBytesOk returns a tuple with the TransmittedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRecord) GetTransmittedBytesOk() (*float32, bool) {
	if o == nil || isNil(o.TransmittedBytes) {
		return nil, false
	}
	return o.TransmittedBytes, true
}

// HasTransmittedBytes returns a boolean if a field has been set.
func (o *DeviceRecord) HasTransmittedBytes() bool {
	if o != nil && !isNil(o.TransmittedBytes) {
		return true
	}

	return false
}

// SetTransmittedBytes gets a reference to the given float32 and assigns it to the TransmittedBytes field.
func (o *DeviceRecord) SetTransmittedBytes(v float32) {
	o.TransmittedBytes = &v
}

// GetUsageTime returns the UsageTime field value if set, zero value otherwise.
func (o *DeviceRecord) GetUsageTime() float32 {
	if o == nil || isNil(o.UsageTime) {
		var ret float32
		return ret
	}
	return *o.UsageTime
}

// GetUsageTimeOk returns a tuple with the UsageTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceRecord) GetUsageTimeOk() (*float32, bool) {
	if o == nil || isNil(o.UsageTime) {
		return nil, false
	}
	return o.UsageTime, true
}

// HasUsageTime returns a boolean if a field has been set.
func (o *DeviceRecord) HasUsageTime() bool {
	if o != nil && !isNil(o.UsageTime) {
		return true
	}

	return false
}

// SetUsageTime gets a reference to the given float32 and assigns it to the UsageTime field.
func (o *DeviceRecord) SetUsageTime(v float32) {
	o.UsageTime = &v
}

func (o DeviceRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.ReceivedBytes) {
		toSerialize["received_bytes"] = o.ReceivedBytes
	}
	if !isNil(o.TransmittedBytes) {
		toSerialize["transmitted_bytes"] = o.TransmittedBytes
	}
	if !isNil(o.UsageTime) {
		toSerialize["usage_time"] = o.UsageTime
	}
	return toSerialize, nil
}

type NullableDeviceRecord struct {
	value *DeviceRecord
	isSet bool
}

func (v NullableDeviceRecord) Get() *DeviceRecord {
	return v.value
}

func (v *NullableDeviceRecord) Set(val *DeviceRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceRecord(val *DeviceRecord) *NullableDeviceRecord {
	return &NullableDeviceRecord{value: val, isSet: true}
}

func (v NullableDeviceRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


