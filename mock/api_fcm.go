// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_fcm.go

// Package forestvpn_api_mock is a generated GoMock package.
package forestvpn_api_mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockFcmApi is a mock of FcmApi interface.
type MockFcmApi struct {
	ctrl     *gomock.Controller
	recorder *MockFcmApiMockRecorder
}

// MockFcmApiMockRecorder is the mock recorder for MockFcmApi.
type MockFcmApiMockRecorder struct {
	mock *MockFcmApi
}

// NewMockFcmApi creates a new mock instance.
func NewMockFcmApi(ctrl *gomock.Controller) *MockFcmApi {
	mock := &MockFcmApi{ctrl: ctrl}
	mock.recorder = &MockFcmApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFcmApi) EXPECT() *MockFcmApiMockRecorder {
	return m.recorder
}

// CreateFCMDevice mocks base method.
func (m *MockFcmApi) CreateFCMDevice(ctx context.Context) api_client_go.ApiCreateFCMDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFCMDevice", ctx)
	ret0, _ := ret[0].(api_client_go.ApiCreateFCMDeviceRequest)
	return ret0
}

// CreateFCMDevice indicates an expected call of CreateFCMDevice.
func (mr *MockFcmApiMockRecorder) CreateFCMDevice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFCMDevice", reflect.TypeOf((*MockFcmApi)(nil).CreateFCMDevice), ctx)
}

// CreateFCMDeviceExecute mocks base method.
func (m *MockFcmApi) CreateFCMDeviceExecute(r api_client_go.ApiCreateFCMDeviceRequest) (*api_client_go.FCMDevice, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFCMDeviceExecute", r)
	ret0, _ := ret[0].(*api_client_go.FCMDevice)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFCMDeviceExecute indicates an expected call of CreateFCMDeviceExecute.
func (mr *MockFcmApiMockRecorder) CreateFCMDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFCMDeviceExecute", reflect.TypeOf((*MockFcmApi)(nil).CreateFCMDeviceExecute), r)
}

// DeleteFCMDevice mocks base method.
func (m *MockFcmApi) DeleteFCMDevice(ctx context.Context, registrationID string) api_client_go.ApiDeleteFCMDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFCMDevice", ctx, registrationID)
	ret0, _ := ret[0].(api_client_go.ApiDeleteFCMDeviceRequest)
	return ret0
}

// DeleteFCMDevice indicates an expected call of DeleteFCMDevice.
func (mr *MockFcmApiMockRecorder) DeleteFCMDevice(ctx, registrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFCMDevice", reflect.TypeOf((*MockFcmApi)(nil).DeleteFCMDevice), ctx, registrationID)
}

// DeleteFCMDeviceExecute mocks base method.
func (m *MockFcmApi) DeleteFCMDeviceExecute(r api_client_go.ApiDeleteFCMDeviceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFCMDeviceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFCMDeviceExecute indicates an expected call of DeleteFCMDeviceExecute.
func (mr *MockFcmApiMockRecorder) DeleteFCMDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFCMDeviceExecute", reflect.TypeOf((*MockFcmApi)(nil).DeleteFCMDeviceExecute), r)
}

// GetFCMDevice mocks base method.
func (m *MockFcmApi) GetFCMDevice(ctx context.Context, registrationID string) api_client_go.ApiGetFCMDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCMDevice", ctx, registrationID)
	ret0, _ := ret[0].(api_client_go.ApiGetFCMDeviceRequest)
	return ret0
}

// GetFCMDevice indicates an expected call of GetFCMDevice.
func (mr *MockFcmApiMockRecorder) GetFCMDevice(ctx, registrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCMDevice", reflect.TypeOf((*MockFcmApi)(nil).GetFCMDevice), ctx, registrationID)
}

// GetFCMDeviceExecute mocks base method.
func (m *MockFcmApi) GetFCMDeviceExecute(r api_client_go.ApiGetFCMDeviceRequest) (*api_client_go.FCMDevice, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCMDeviceExecute", r)
	ret0, _ := ret[0].(*api_client_go.FCMDevice)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFCMDeviceExecute indicates an expected call of GetFCMDeviceExecute.
func (mr *MockFcmApiMockRecorder) GetFCMDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCMDeviceExecute", reflect.TypeOf((*MockFcmApi)(nil).GetFCMDeviceExecute), r)
}

// UpdateFCMDevice mocks base method.
func (m *MockFcmApi) UpdateFCMDevice(ctx context.Context, registrationID string) api_client_go.ApiUpdateFCMDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFCMDevice", ctx, registrationID)
	ret0, _ := ret[0].(api_client_go.ApiUpdateFCMDeviceRequest)
	return ret0
}

// UpdateFCMDevice indicates an expected call of UpdateFCMDevice.
func (mr *MockFcmApiMockRecorder) UpdateFCMDevice(ctx, registrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFCMDevice", reflect.TypeOf((*MockFcmApi)(nil).UpdateFCMDevice), ctx, registrationID)
}

// UpdateFCMDeviceExecute mocks base method.
func (m *MockFcmApi) UpdateFCMDeviceExecute(r api_client_go.ApiUpdateFCMDeviceRequest) (*api_client_go.FCMDevice, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFCMDeviceExecute", r)
	ret0, _ := ret[0].(*api_client_go.FCMDevice)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFCMDeviceExecute indicates an expected call of UpdateFCMDeviceExecute.
func (mr *MockFcmApiMockRecorder) UpdateFCMDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFCMDeviceExecute", reflect.TypeOf((*MockFcmApi)(nil).UpdateFCMDeviceExecute), r)
}
