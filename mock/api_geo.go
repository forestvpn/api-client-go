// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_geo.go

// Package forestvpn_api_mock is a generated GoMock package.
package forestvpn_api_mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockGeoApi is a mock of GeoApi interface.
type MockGeoApi struct {
	ctrl     *gomock.Controller
	recorder *MockGeoApiMockRecorder
}

// MockGeoApiMockRecorder is the mock recorder for MockGeoApi.
type MockGeoApiMockRecorder struct {
	mock *MockGeoApi
}

// NewMockGeoApi creates a new mock instance.
func NewMockGeoApi(ctrl *gomock.Controller) *MockGeoApi {
	mock := &MockGeoApi{ctrl: ctrl}
	mock.recorder = &MockGeoApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoApi) EXPECT() *MockGeoApiMockRecorder {
	return m.recorder
}

// ListCountries mocks base method.
func (m *MockGeoApi) ListCountries(ctx context.Context) api_client_go.ApiListCountriesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCountries", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListCountriesRequest)
	return ret0
}

// ListCountries indicates an expected call of ListCountries.
func (mr *MockGeoApiMockRecorder) ListCountries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCountries", reflect.TypeOf((*MockGeoApi)(nil).ListCountries), ctx)
}

// ListCountriesExecute mocks base method.
func (m *MockGeoApi) ListCountriesExecute(r api_client_go.ApiListCountriesRequest) ([]api_client_go.Country, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCountriesExecute", r)
	ret0, _ := ret[0].([]api_client_go.Country)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCountriesExecute indicates an expected call of ListCountriesExecute.
func (mr *MockGeoApiMockRecorder) ListCountriesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCountriesExecute", reflect.TypeOf((*MockGeoApi)(nil).ListCountriesExecute), r)
}

// ListCurrencies mocks base method.
func (m *MockGeoApi) ListCurrencies(ctx context.Context) api_client_go.ApiListCurrenciesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencies", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListCurrenciesRequest)
	return ret0
}

// ListCurrencies indicates an expected call of ListCurrencies.
func (mr *MockGeoApiMockRecorder) ListCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencies", reflect.TypeOf((*MockGeoApi)(nil).ListCurrencies), ctx)
}

// ListCurrenciesExecute mocks base method.
func (m *MockGeoApi) ListCurrenciesExecute(r api_client_go.ApiListCurrenciesRequest) ([]api_client_go.Currency, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrenciesExecute", r)
	ret0, _ := ret[0].([]api_client_go.Currency)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCurrenciesExecute indicates an expected call of ListCurrenciesExecute.
func (mr *MockGeoApiMockRecorder) ListCurrenciesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrenciesExecute", reflect.TypeOf((*MockGeoApi)(nil).ListCurrenciesExecute), r)
}

// ListLocations mocks base method.
func (m *MockGeoApi) ListLocations(ctx context.Context) api_client_go.ApiListLocationsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListLocationsRequest)
	return ret0
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockGeoApiMockRecorder) ListLocations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockGeoApi)(nil).ListLocations), ctx)
}

// ListLocationsExecute mocks base method.
func (m *MockGeoApi) ListLocationsExecute(r api_client_go.ApiListLocationsRequest) ([]api_client_go.Location, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocationsExecute", r)
	ret0, _ := ret[0].([]api_client_go.Location)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLocationsExecute indicates an expected call of ListLocationsExecute.
func (mr *MockGeoApiMockRecorder) ListLocationsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocationsExecute", reflect.TypeOf((*MockGeoApi)(nil).ListLocationsExecute), r)
}
