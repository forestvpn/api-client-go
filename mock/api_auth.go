// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_auth.go

// Package forestvpn_api_mock is a generated GoMock package.
package forestvpn_api_mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthApi is a mock of AuthApi interface.
type MockAuthApi struct {
	ctrl     *gomock.Controller
	recorder *MockAuthApiMockRecorder
}

// MockAuthApiMockRecorder is the mock recorder for MockAuthApi.
type MockAuthApiMockRecorder struct {
	mock *MockAuthApi
}

// NewMockAuthApi creates a new mock instance.
func NewMockAuthApi(ctrl *gomock.Controller) *MockAuthApi {
	mock := &MockAuthApi{ctrl: ctrl}
	mock.recorder = &MockAuthApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApi) EXPECT() *MockAuthApiMockRecorder {
	return m.recorder
}

// AuthorizeAccessTokenRequest mocks base method.
func (m *MockAuthApi) AuthorizeAccessTokenRequest(ctx context.Context, requestID string) api_client_go.ApiAuthorizeAccessTokenRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeAccessTokenRequest", ctx, requestID)
	ret0, _ := ret[0].(api_client_go.ApiAuthorizeAccessTokenRequestRequest)
	return ret0
}

// AuthorizeAccessTokenRequest indicates an expected call of AuthorizeAccessTokenRequest.
func (mr *MockAuthApiMockRecorder) AuthorizeAccessTokenRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeAccessTokenRequest", reflect.TypeOf((*MockAuthApi)(nil).AuthorizeAccessTokenRequest), ctx, requestID)
}

// AuthorizeAccessTokenRequestExecute mocks base method.
func (m *MockAuthApi) AuthorizeAccessTokenRequestExecute(r api_client_go.ApiAuthorizeAccessTokenRequestRequest) (*api_client_go.AccessTokenRequest, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeAccessTokenRequestExecute", r)
	ret0, _ := ret[0].(*api_client_go.AccessTokenRequest)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AuthorizeAccessTokenRequestExecute indicates an expected call of AuthorizeAccessTokenRequestExecute.
func (mr *MockAuthApiMockRecorder) AuthorizeAccessTokenRequestExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeAccessTokenRequestExecute", reflect.TypeOf((*MockAuthApi)(nil).AuthorizeAccessTokenRequestExecute), r)
}

// CreateAccessTokenRequest mocks base method.
func (m *MockAuthApi) CreateAccessTokenRequest(ctx context.Context) api_client_go.ApiCreateAccessTokenRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessTokenRequest", ctx)
	ret0, _ := ret[0].(api_client_go.ApiCreateAccessTokenRequestRequest)
	return ret0
}

// CreateAccessTokenRequest indicates an expected call of CreateAccessTokenRequest.
func (mr *MockAuthApiMockRecorder) CreateAccessTokenRequest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessTokenRequest", reflect.TypeOf((*MockAuthApi)(nil).CreateAccessTokenRequest), ctx)
}

// CreateAccessTokenRequestExecute mocks base method.
func (m *MockAuthApi) CreateAccessTokenRequestExecute(r api_client_go.ApiCreateAccessTokenRequestRequest) (*api_client_go.AccessTokenRequest, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessTokenRequestExecute", r)
	ret0, _ := ret[0].(*api_client_go.AccessTokenRequest)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAccessTokenRequestExecute indicates an expected call of CreateAccessTokenRequestExecute.
func (mr *MockAuthApiMockRecorder) CreateAccessTokenRequestExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessTokenRequestExecute", reflect.TypeOf((*MockAuthApi)(nil).CreateAccessTokenRequestExecute), r)
}

// GetAccessTokenRequest mocks base method.
func (m *MockAuthApi) GetAccessTokenRequest(ctx context.Context, requestID string) api_client_go.ApiGetAccessTokenRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenRequest", ctx, requestID)
	ret0, _ := ret[0].(api_client_go.ApiGetAccessTokenRequestRequest)
	return ret0
}

// GetAccessTokenRequest indicates an expected call of GetAccessTokenRequest.
func (mr *MockAuthApiMockRecorder) GetAccessTokenRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenRequest", reflect.TypeOf((*MockAuthApi)(nil).GetAccessTokenRequest), ctx, requestID)
}

// GetAccessTokenRequestExecute mocks base method.
func (m *MockAuthApi) GetAccessTokenRequestExecute(r api_client_go.ApiGetAccessTokenRequestRequest) (*api_client_go.AccessTokenRequest, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenRequestExecute", r)
	ret0, _ := ret[0].(*api_client_go.AccessTokenRequest)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessTokenRequestExecute indicates an expected call of GetAccessTokenRequestExecute.
func (mr *MockAuthApiMockRecorder) GetAccessTokenRequestExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenRequestExecute", reflect.TypeOf((*MockAuthApi)(nil).GetAccessTokenRequestExecute), r)
}

// LoginToken mocks base method.
func (m *MockAuthApi) LoginToken(ctx context.Context) api_client_go.ApiLoginTokenRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginToken", ctx)
	ret0, _ := ret[0].(api_client_go.ApiLoginTokenRequest)
	return ret0
}

// LoginToken indicates an expected call of LoginToken.
func (mr *MockAuthApiMockRecorder) LoginToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginToken", reflect.TypeOf((*MockAuthApi)(nil).LoginToken), ctx)
}

// LoginTokenExecute mocks base method.
func (m *MockAuthApi) LoginTokenExecute(r api_client_go.ApiLoginTokenRequest) (*api_client_go.TokenLogin, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginTokenExecute", r)
	ret0, _ := ret[0].(*api_client_go.TokenLogin)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginTokenExecute indicates an expected call of LoginTokenExecute.
func (mr *MockAuthApiMockRecorder) LoginTokenExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginTokenExecute", reflect.TypeOf((*MockAuthApi)(nil).LoginTokenExecute), r)
}

// MigrateLegacyAuth mocks base method.
func (m *MockAuthApi) MigrateLegacyAuth(ctx context.Context) api_client_go.ApiMigrateLegacyAuthRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateLegacyAuth", ctx)
	ret0, _ := ret[0].(api_client_go.ApiMigrateLegacyAuthRequest)
	return ret0
}

// MigrateLegacyAuth indicates an expected call of MigrateLegacyAuth.
func (mr *MockAuthApiMockRecorder) MigrateLegacyAuth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLegacyAuth", reflect.TypeOf((*MockAuthApi)(nil).MigrateLegacyAuth), ctx)
}

// MigrateLegacyAuthExecute mocks base method.
func (m *MockAuthApi) MigrateLegacyAuthExecute(r api_client_go.ApiMigrateLegacyAuthRequest) (*api_client_go.LegacyAuthMigrationToken, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateLegacyAuthExecute", r)
	ret0, _ := ret[0].(*api_client_go.LegacyAuthMigrationToken)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MigrateLegacyAuthExecute indicates an expected call of MigrateLegacyAuthExecute.
func (mr *MockAuthApiMockRecorder) MigrateLegacyAuthExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLegacyAuthExecute", reflect.TypeOf((*MockAuthApi)(nil).MigrateLegacyAuthExecute), r)
}

// ObtainToken mocks base method.
func (m *MockAuthApi) ObtainToken(ctx context.Context) api_client_go.ApiObtainTokenRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainToken", ctx)
	ret0, _ := ret[0].(api_client_go.ApiObtainTokenRequest)
	return ret0
}

// ObtainToken indicates an expected call of ObtainToken.
func (mr *MockAuthApiMockRecorder) ObtainToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainToken", reflect.TypeOf((*MockAuthApi)(nil).ObtainToken), ctx)
}

// ObtainTokenExecute mocks base method.
func (m *MockAuthApi) ObtainTokenExecute(r api_client_go.ApiObtainTokenRequest) (*api_client_go.TokenObtain, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainTokenExecute", r)
	ret0, _ := ret[0].(*api_client_go.TokenObtain)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ObtainTokenExecute indicates an expected call of ObtainTokenExecute.
func (mr *MockAuthApiMockRecorder) ObtainTokenExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainTokenExecute", reflect.TypeOf((*MockAuthApi)(nil).ObtainTokenExecute), r)
}

// RevokeAccessTokenRequest mocks base method.
func (m *MockAuthApi) RevokeAccessTokenRequest(ctx context.Context, requestID string) api_client_go.ApiRevokeAccessTokenRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessTokenRequest", ctx, requestID)
	ret0, _ := ret[0].(api_client_go.ApiRevokeAccessTokenRequestRequest)
	return ret0
}

// RevokeAccessTokenRequest indicates an expected call of RevokeAccessTokenRequest.
func (mr *MockAuthApiMockRecorder) RevokeAccessTokenRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessTokenRequest", reflect.TypeOf((*MockAuthApi)(nil).RevokeAccessTokenRequest), ctx, requestID)
}

// RevokeAccessTokenRequestExecute mocks base method.
func (m *MockAuthApi) RevokeAccessTokenRequestExecute(r api_client_go.ApiRevokeAccessTokenRequestRequest) (*api_client_go.AccessTokenRequest, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessTokenRequestExecute", r)
	ret0, _ := ret[0].(*api_client_go.AccessTokenRequest)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RevokeAccessTokenRequestExecute indicates an expected call of RevokeAccessTokenRequestExecute.
func (mr *MockAuthApiMockRecorder) RevokeAccessTokenRequestExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessTokenRequestExecute", reflect.TypeOf((*MockAuthApi)(nil).RevokeAccessTokenRequestExecute), r)
}

// UpdateUserProfile mocks base method.
func (m *MockAuthApi) UpdateUserProfile(ctx context.Context) api_client_go.ApiUpdateUserProfileRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx)
	ret0, _ := ret[0].(api_client_go.ApiUpdateUserProfileRequest)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockAuthApiMockRecorder) UpdateUserProfile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockAuthApi)(nil).UpdateUserProfile), ctx)
}

// UpdateUserProfileExecute mocks base method.
func (m *MockAuthApi) UpdateUserProfileExecute(r api_client_go.ApiUpdateUserProfileRequest) (*api_client_go.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfileExecute", r)
	ret0, _ := ret[0].(*api_client_go.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUserProfileExecute indicates an expected call of UpdateUserProfileExecute.
func (mr *MockAuthApiMockRecorder) UpdateUserProfileExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileExecute", reflect.TypeOf((*MockAuthApi)(nil).UpdateUserProfileExecute), r)
}

// UserProfile mocks base method.
func (m *MockAuthApi) UserProfile(ctx context.Context) api_client_go.ApiUserProfileRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", ctx)
	ret0, _ := ret[0].(api_client_go.ApiUserProfileRequest)
	return ret0
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockAuthApiMockRecorder) UserProfile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockAuthApi)(nil).UserProfile), ctx)
}

// UserProfileExecute mocks base method.
func (m *MockAuthApi) UserProfileExecute(r api_client_go.ApiUserProfileRequest) (*api_client_go.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfileExecute", r)
	ret0, _ := ret[0].(*api_client_go.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserProfileExecute indicates an expected call of UserProfileExecute.
func (mr *MockAuthApiMockRecorder) UserProfileExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfileExecute", reflect.TypeOf((*MockAuthApi)(nil).UserProfileExecute), r)
}

// WhoAmI mocks base method.
func (m *MockAuthApi) WhoAmI(ctx context.Context) api_client_go.ApiWhoAmIRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", ctx)
	ret0, _ := ret[0].(api_client_go.ApiWhoAmIRequest)
	return ret0
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockAuthApiMockRecorder) WhoAmI(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockAuthApi)(nil).WhoAmI), ctx)
}

// WhoAmIExecute mocks base method.
func (m *MockAuthApi) WhoAmIExecute(r api_client_go.ApiWhoAmIRequest) (*api_client_go.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmIExecute", r)
	ret0, _ := ret[0].(*api_client_go.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WhoAmIExecute indicates an expected call of WhoAmIExecute.
func (mr *MockAuthApiMockRecorder) WhoAmIExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmIExecute", reflect.TypeOf((*MockAuthApi)(nil).WhoAmIExecute), r)
}
