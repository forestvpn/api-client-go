/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// checks if the UserAgent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAgent{}

// UserAgent struct for UserAgent
type UserAgent struct {
	Os *UserAgentOs `json:"os,omitempty"`
	Device *UserAgentDevice `json:"device,omitempty"`
	Browser *UserAgentBrowser `json:"browser,omitempty"`
}

// NewUserAgent instantiates a new UserAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgent() *UserAgent {
	this := UserAgent{}
	return &this
}

// NewUserAgentWithDefaults instantiates a new UserAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentWithDefaults() *UserAgent {
	this := UserAgent{}
	return &this
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *UserAgent) GetOs() UserAgentOs {
	if o == nil || isNil(o.Os) {
		var ret UserAgentOs
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetOsOk() (*UserAgentOs, bool) {
	if o == nil || isNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *UserAgent) HasOs() bool {
	if o != nil && !isNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given UserAgentOs and assigns it to the Os field.
func (o *UserAgent) SetOs(v UserAgentOs) {
	o.Os = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *UserAgent) GetDevice() UserAgentDevice {
	if o == nil || isNil(o.Device) {
		var ret UserAgentDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetDeviceOk() (*UserAgentDevice, bool) {
	if o == nil || isNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *UserAgent) HasDevice() bool {
	if o != nil && !isNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given UserAgentDevice and assigns it to the Device field.
func (o *UserAgent) SetDevice(v UserAgentDevice) {
	o.Device = &v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *UserAgent) GetBrowser() UserAgentBrowser {
	if o == nil || isNil(o.Browser) {
		var ret UserAgentBrowser
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgent) GetBrowserOk() (*UserAgentBrowser, bool) {
	if o == nil || isNil(o.Browser) {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *UserAgent) HasBrowser() bool {
	if o != nil && !isNil(o.Browser) {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given UserAgentBrowser and assigns it to the Browser field.
func (o *UserAgent) SetBrowser(v UserAgentBrowser) {
	o.Browser = &v
}

func (o UserAgent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !isNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !isNil(o.Browser) {
		toSerialize["browser"] = o.Browser
	}
	return toSerialize, nil
}

type NullableUserAgent struct {
	value *UserAgent
	isSet bool
}

func (v NullableUserAgent) Get() *UserAgent {
	return v.value
}

func (v *NullableUserAgent) Set(val *UserAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgent(val *UserAgent) *NullableUserAgent {
	return &NullableUserAgent{value: val, isSet: true}
}

func (v NullableUserAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


