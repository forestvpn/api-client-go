/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// Country struct for Country
type Country struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Emoji string `json:"emoji"`
	CurrencyCode *string `json:"currency_code,omitempty"`
	AlternativeNames []string `json:"alternative_names,omitempty"`
}

// NewCountry instantiates a new Country object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountry(id string, name string, emoji string) *Country {
	this := Country{}
	this.Id = id
	this.Name = name
	this.Emoji = emoji
	return &this
}

// NewCountryWithDefaults instantiates a new Country object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryWithDefaults() *Country {
	this := Country{}
	return &this
}

// GetId returns the Id field value
func (o *Country) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Country) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Country) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Country) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Country) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Country) SetName(v string) {
	o.Name = v
}

// GetEmoji returns the Emoji field value
func (o *Country) GetEmoji() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value
// and a boolean to check if the value has been set.
func (o *Country) GetEmojiOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Emoji, true
}

// SetEmoji sets field value
func (o *Country) SetEmoji(v string) {
	o.Emoji = v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Country) GetCurrencyCode() string {
	if o == nil || isNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || isNil(o.CurrencyCode) {
    return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Country) HasCurrencyCode() bool {
	if o != nil && !isNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *Country) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetAlternativeNames returns the AlternativeNames field value if set, zero value otherwise.
func (o *Country) GetAlternativeNames() []string {
	if o == nil || isNil(o.AlternativeNames) {
		var ret []string
		return ret
	}
	return o.AlternativeNames
}

// GetAlternativeNamesOk returns a tuple with the AlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetAlternativeNamesOk() ([]string, bool) {
	if o == nil || isNil(o.AlternativeNames) {
    return nil, false
	}
	return o.AlternativeNames, true
}

// HasAlternativeNames returns a boolean if a field has been set.
func (o *Country) HasAlternativeNames() bool {
	if o != nil && !isNil(o.AlternativeNames) {
		return true
	}

	return false
}

// SetAlternativeNames gets a reference to the given []string and assigns it to the AlternativeNames field.
func (o *Country) SetAlternativeNames(v []string) {
	o.AlternativeNames = v
}

func (o Country) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["emoji"] = o.Emoji
	}
	if !isNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if !isNil(o.AlternativeNames) {
		toSerialize["alternative_names"] = o.AlternativeNames
	}
	return json.Marshal(toSerialize)
}

type NullableCountry struct {
	value *Country
	isSet bool
}

func (v NullableCountry) Get() *Country {
	return v.value
}

func (v *NullableCountry) Set(val *Country) {
	v.value = val
	v.isSet = true
}

func (v NullableCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountry(val *Country) *NullableCountry {
	return &NullableCountry{value: val, isSet: true}
}

func (v NullableCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


