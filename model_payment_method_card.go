/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// PaymentMethodCard struct for PaymentMethodCard
type PaymentMethodCard struct {
	// Card brand
	Brand string `json:"brand"`
	// Last 4 digits of the card
	Last4 string `json:"last4"`
	Country *Country `json:"country,omitempty"`
	// Last day of the expiration year and month
	ExpiresAt string `json:"expires_at"`
}

// NewPaymentMethodCard instantiates a new PaymentMethodCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodCard(brand string, last4 string, expiresAt string) *PaymentMethodCard {
	this := PaymentMethodCard{}
	this.Brand = brand
	this.Last4 = last4
	this.ExpiresAt = expiresAt
	return &this
}

// NewPaymentMethodCardWithDefaults instantiates a new PaymentMethodCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodCardWithDefaults() *PaymentMethodCard {
	this := PaymentMethodCard{}
	return &this
}

// GetBrand returns the Brand field value
func (o *PaymentMethodCard) GetBrand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Brand
}

// GetBrandOk returns a tuple with the Brand field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodCard) GetBrandOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Brand, true
}

// SetBrand sets field value
func (o *PaymentMethodCard) SetBrand(v string) {
	o.Brand = v
}

// GetLast4 returns the Last4 field value
func (o *PaymentMethodCard) GetLast4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodCard) GetLast4Ok() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Last4, true
}

// SetLast4 sets field value
func (o *PaymentMethodCard) SetLast4(v string) {
	o.Last4 = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PaymentMethodCard) GetCountry() Country {
	if o == nil || isNil(o.Country) {
		var ret Country
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodCard) GetCountryOk() (*Country, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PaymentMethodCard) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given Country and assigns it to the Country field.
func (o *PaymentMethodCard) SetCountry(v Country) {
	o.Country = &v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *PaymentMethodCard) GetExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodCard) GetExpiresAtOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *PaymentMethodCard) SetExpiresAt(v string) {
	o.ExpiresAt = v
}

func (o PaymentMethodCard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["brand"] = o.Brand
	}
	if true {
		toSerialize["last4"] = o.Last4
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethodCard struct {
	value *PaymentMethodCard
	isSet bool
}

func (v NullablePaymentMethodCard) Get() *PaymentMethodCard {
	return v.value
}

func (v *NullablePaymentMethodCard) Set(val *PaymentMethodCard) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodCard) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodCard(val *PaymentMethodCard) *NullablePaymentMethodCard {
	return &NullablePaymentMethodCard{value: val, isSet: true}
}

func (v NullablePaymentMethodCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


