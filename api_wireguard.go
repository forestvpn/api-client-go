/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type WireguardApi interface {

	/*
	GetWireGuardPeerInfo Wireguard peer info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pubKey
	@return ApiGetWireGuardPeerInfoRequest
	*/
	GetWireGuardPeerInfo(ctx context.Context, pubKey string) ApiGetWireGuardPeerInfoRequest

	// GetWireGuardPeerInfoExecute executes the request
	//  @return WireGuardPeerInfo
	GetWireGuardPeerInfoExecute(r ApiGetWireGuardPeerInfoRequest) (*WireGuardPeerInfo, *http.Response, error)

	/*
	ListWireGuardPeers Wireguard peers list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListWireGuardPeersRequest
	*/
	ListWireGuardPeers(ctx context.Context) ApiListWireGuardPeersRequest

	// ListWireGuardPeersExecute executes the request
	//  @return []WireGuardPeerInfo
	ListWireGuardPeersExecute(r ApiListWireGuardPeersRequest) ([]WireGuardPeerInfo, *http.Response, error)
}

// WireguardApiService WireguardApi service
type WireguardApiService service

type ApiGetWireGuardPeerInfoRequest struct {
	ctx context.Context
	ApiService WireguardApi
	pubKey string
}

func (r ApiGetWireGuardPeerInfoRequest) Execute() (*WireGuardPeerInfo, *http.Response, error) {
	return r.ApiService.GetWireGuardPeerInfoExecute(r)
}

/*
GetWireGuardPeerInfo Wireguard peer info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pubKey
 @return ApiGetWireGuardPeerInfoRequest
*/
func (a *WireguardApiService) GetWireGuardPeerInfo(ctx context.Context, pubKey string) ApiGetWireGuardPeerInfoRequest {
	return ApiGetWireGuardPeerInfoRequest{
		ApiService: a,
		ctx: ctx,
		pubKey: pubKey,
	}
}

// Execute executes the request
//  @return WireGuardPeerInfo
func (a *WireguardApiService) GetWireGuardPeerInfoExecute(r ApiGetWireGuardPeerInfoRequest) (*WireGuardPeerInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WireGuardPeerInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WireguardApiService.GetWireGuardPeerInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wireguard/peers/{pubKey}/"
	localVarPath = strings.Replace(localVarPath, "{"+"pubKey"+"}", url.PathEscape(parameterValueToString(r.pubKey, "pubKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWireGuardPeersRequest struct {
	ctx context.Context
	ApiService WireguardApi
}

func (r ApiListWireGuardPeersRequest) Execute() ([]WireGuardPeerInfo, *http.Response, error) {
	return r.ApiService.ListWireGuardPeersExecute(r)
}

/*
ListWireGuardPeers Wireguard peers list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWireGuardPeersRequest
*/
func (a *WireguardApiService) ListWireGuardPeers(ctx context.Context) ApiListWireGuardPeersRequest {
	return ApiListWireGuardPeersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WireGuardPeerInfo
func (a *WireguardApiService) ListWireGuardPeersExecute(r ApiListWireGuardPeersRequest) ([]WireGuardPeerInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WireGuardPeerInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WireguardApiService.ListWireGuardPeers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wireguard/peers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
