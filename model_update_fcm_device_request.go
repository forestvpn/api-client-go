/*
ForestVPN API

ForestVPN defeats content restrictions and censorship to deliver unlimited access to video, music, social media, and more, from anywhere in the world. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// UpdateFCMDeviceRequest struct for UpdateFCMDeviceRequest
type UpdateFCMDeviceRequest struct {
	DeviceId NullableString `json:"device_id,omitempty"`
	Active NullableBool `json:"active,omitempty"`
}

// NewUpdateFCMDeviceRequest instantiates a new UpdateFCMDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFCMDeviceRequest() *UpdateFCMDeviceRequest {
	this := UpdateFCMDeviceRequest{}
	return &this
}

// NewUpdateFCMDeviceRequestWithDefaults instantiates a new UpdateFCMDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFCMDeviceRequestWithDefaults() *UpdateFCMDeviceRequest {
	this := UpdateFCMDeviceRequest{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateFCMDeviceRequest) GetDeviceId() string {
	if o == nil || o.DeviceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateFCMDeviceRequest) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *UpdateFCMDeviceRequest) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableString and assigns it to the DeviceId field.
func (o *UpdateFCMDeviceRequest) SetDeviceId(v string) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *UpdateFCMDeviceRequest) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *UpdateFCMDeviceRequest) UnsetDeviceId() {
	o.DeviceId.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateFCMDeviceRequest) GetActive() bool {
	if o == nil || o.Active.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateFCMDeviceRequest) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *UpdateFCMDeviceRequest) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *UpdateFCMDeviceRequest) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *UpdateFCMDeviceRequest) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *UpdateFCMDeviceRequest) UnsetActive() {
	o.Active.Unset()
}

func (o UpdateFCMDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId.IsSet() {
		toSerialize["device_id"] = o.DeviceId.Get()
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateFCMDeviceRequest struct {
	value *UpdateFCMDeviceRequest
	isSet bool
}

func (v NullableUpdateFCMDeviceRequest) Get() *UpdateFCMDeviceRequest {
	return v.value
}

func (v *NullableUpdateFCMDeviceRequest) Set(val *UpdateFCMDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFCMDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFCMDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFCMDeviceRequest(val *UpdateFCMDeviceRequest) *NullableUpdateFCMDeviceRequest {
	return &NullableUpdateFCMDeviceRequest{value: val, isSet: true}
}

func (v NullableUpdateFCMDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFCMDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


