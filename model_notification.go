/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
	"time"
)

// checks if the Notification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Notification{}

// Notification struct for Notification
type Notification struct {
	Id int32 `json:"id"`
	Slug int32 `json:"slug"`
	Title string `json:"title"`
	Description string `json:"description"`
	Unread bool `json:"unread"`
	Type string `json:"type"`
	Level *string `json:"level,omitempty"`
	Recipient *string `json:"recipient,omitempty"`
	ActorContentType *int32 `json:"actor_content_type,omitempty"`
	ActorObjectId *string `json:"actor_object_id,omitempty"`
	Verb *string `json:"verb,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Public *bool `json:"public,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Data *string `json:"data,omitempty"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification(id int32, slug int32, title string, description string, unread bool, type_ string) *Notification {
	this := Notification{}
	this.Id = id
	this.Slug = slug
	this.Title = title
	this.Description = description
	this.Unread = unread
	this.Type = type_
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetId returns the Id field value
func (o *Notification) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Notification) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Notification) SetId(v int32) {
	o.Id = v
}

// GetSlug returns the Slug field value
func (o *Notification) GetSlug() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Notification) GetSlugOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Notification) SetSlug(v int32) {
	o.Slug = v
}

// GetTitle returns the Title field value
func (o *Notification) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Notification) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Notification) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *Notification) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Notification) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Notification) SetDescription(v string) {
	o.Description = v
}

// GetUnread returns the Unread field value
func (o *Notification) GetUnread() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Unread
}

// GetUnreadOk returns a tuple with the Unread field value
// and a boolean to check if the value has been set.
func (o *Notification) GetUnreadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unread, true
}

// SetUnread sets field value
func (o *Notification) SetUnread(v bool) {
	o.Unread = v
}

// GetType returns the Type field value
func (o *Notification) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Notification) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Notification) SetType(v string) {
	o.Type = v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Notification) GetLevel() string {
	if o == nil || isNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLevelOk() (*string, bool) {
	if o == nil || isNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Notification) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *Notification) SetLevel(v string) {
	o.Level = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *Notification) GetRecipient() string {
	if o == nil || isNil(o.Recipient) {
		var ret string
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetRecipientOk() (*string, bool) {
	if o == nil || isNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *Notification) HasRecipient() bool {
	if o != nil && !isNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given string and assigns it to the Recipient field.
func (o *Notification) SetRecipient(v string) {
	o.Recipient = &v
}

// GetActorContentType returns the ActorContentType field value if set, zero value otherwise.
func (o *Notification) GetActorContentType() int32 {
	if o == nil || isNil(o.ActorContentType) {
		var ret int32
		return ret
	}
	return *o.ActorContentType
}

// GetActorContentTypeOk returns a tuple with the ActorContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetActorContentTypeOk() (*int32, bool) {
	if o == nil || isNil(o.ActorContentType) {
		return nil, false
	}
	return o.ActorContentType, true
}

// HasActorContentType returns a boolean if a field has been set.
func (o *Notification) HasActorContentType() bool {
	if o != nil && !isNil(o.ActorContentType) {
		return true
	}

	return false
}

// SetActorContentType gets a reference to the given int32 and assigns it to the ActorContentType field.
func (o *Notification) SetActorContentType(v int32) {
	o.ActorContentType = &v
}

// GetActorObjectId returns the ActorObjectId field value if set, zero value otherwise.
func (o *Notification) GetActorObjectId() string {
	if o == nil || isNil(o.ActorObjectId) {
		var ret string
		return ret
	}
	return *o.ActorObjectId
}

// GetActorObjectIdOk returns a tuple with the ActorObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetActorObjectIdOk() (*string, bool) {
	if o == nil || isNil(o.ActorObjectId) {
		return nil, false
	}
	return o.ActorObjectId, true
}

// HasActorObjectId returns a boolean if a field has been set.
func (o *Notification) HasActorObjectId() bool {
	if o != nil && !isNil(o.ActorObjectId) {
		return true
	}

	return false
}

// SetActorObjectId gets a reference to the given string and assigns it to the ActorObjectId field.
func (o *Notification) SetActorObjectId(v string) {
	o.ActorObjectId = &v
}

// GetVerb returns the Verb field value if set, zero value otherwise.
func (o *Notification) GetVerb() string {
	if o == nil || isNil(o.Verb) {
		var ret string
		return ret
	}
	return *o.Verb
}

// GetVerbOk returns a tuple with the Verb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetVerbOk() (*string, bool) {
	if o == nil || isNil(o.Verb) {
		return nil, false
	}
	return o.Verb, true
}

// HasVerb returns a boolean if a field has been set.
func (o *Notification) HasVerb() bool {
	if o != nil && !isNil(o.Verb) {
		return true
	}

	return false
}

// SetVerb gets a reference to the given string and assigns it to the Verb field.
func (o *Notification) SetVerb(v string) {
	o.Verb = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Notification) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Notification) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Notification) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *Notification) GetPublic() bool {
	if o == nil || isNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetPublicOk() (*bool, bool) {
	if o == nil || isNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *Notification) HasPublic() bool {
	if o != nil && !isNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *Notification) SetPublic(v bool) {
	o.Public = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Notification) GetDeleted() bool {
	if o == nil || isNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Notification) HasDeleted() bool {
	if o != nil && !isNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Notification) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Notification) GetData() string {
	if o == nil || isNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetDataOk() (*string, bool) {
	if o == nil || isNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Notification) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *Notification) SetData(v string) {
	o.Data = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Notification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["slug"] = o.Slug
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["unread"] = o.Unread
	toSerialize["type"] = o.Type
	if !isNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !isNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	if !isNil(o.ActorContentType) {
		toSerialize["actor_content_type"] = o.ActorContentType
	}
	if !isNil(o.ActorObjectId) {
		toSerialize["actor_object_id"] = o.ActorObjectId
	}
	if !isNil(o.Verb) {
		toSerialize["verb"] = o.Verb
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !isNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


