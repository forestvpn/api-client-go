/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// NotificationAllList struct for NotificationAllList
type NotificationAllList struct {
	UnreadCount *int32 `json:"unread_count,omitempty"`
	AllList []Notification `json:"all_list"`
}

// NewNotificationAllList instantiates a new NotificationAllList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationAllList(allList []Notification) *NotificationAllList {
	this := NotificationAllList{}
	this.AllList = allList
	return &this
}

// NewNotificationAllListWithDefaults instantiates a new NotificationAllList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationAllListWithDefaults() *NotificationAllList {
	this := NotificationAllList{}
	return &this
}

// GetUnreadCount returns the UnreadCount field value if set, zero value otherwise.
func (o *NotificationAllList) GetUnreadCount() int32 {
	if o == nil || isNil(o.UnreadCount) {
		var ret int32
		return ret
	}
	return *o.UnreadCount
}

// GetUnreadCountOk returns a tuple with the UnreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationAllList) GetUnreadCountOk() (*int32, bool) {
	if o == nil || isNil(o.UnreadCount) {
    return nil, false
	}
	return o.UnreadCount, true
}

// HasUnreadCount returns a boolean if a field has been set.
func (o *NotificationAllList) HasUnreadCount() bool {
	if o != nil && !isNil(o.UnreadCount) {
		return true
	}

	return false
}

// SetUnreadCount gets a reference to the given int32 and assigns it to the UnreadCount field.
func (o *NotificationAllList) SetUnreadCount(v int32) {
	o.UnreadCount = &v
}

// GetAllList returns the AllList field value
func (o *NotificationAllList) GetAllList() []Notification {
	if o == nil {
		var ret []Notification
		return ret
	}

	return o.AllList
}

// GetAllListOk returns a tuple with the AllList field value
// and a boolean to check if the value has been set.
func (o *NotificationAllList) GetAllListOk() ([]Notification, bool) {
	if o == nil {
    return nil, false
	}
	return o.AllList, true
}

// SetAllList sets field value
func (o *NotificationAllList) SetAllList(v []Notification) {
	o.AllList = v
}

func (o NotificationAllList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UnreadCount) {
		toSerialize["unread_count"] = o.UnreadCount
	}
	if true {
		toSerialize["all_list"] = o.AllList
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationAllList struct {
	value *NotificationAllList
	isSet bool
}

func (v NullableNotificationAllList) Get() *NotificationAllList {
	return v.value
}

func (v *NullableNotificationAllList) Set(val *NotificationAllList) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationAllList) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationAllList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationAllList(val *NotificationAllList) *NullableNotificationAllList {
	return &NullableNotificationAllList{value: val, isSet: true}
}

func (v NullableNotificationAllList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationAllList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


