/*
ForestVPN API

ForestVPN defeats content restrictions and censorship to deliver unlimited access to video, music, social media, and more, from anywhere in the world. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// CreateCheckoutSessionRequest struct for CreateCheckoutSessionRequest
type CreateCheckoutSessionRequest struct {
	CancelUrl string `json:"cancel_url"`
	SuccessUrl string `json:"success_url"`
	Currency *string `json:"currency,omitempty"`
	Locale *string `json:"locale,omitempty"`
	Email *string `json:"email,omitempty"`
	Products []CreateCheckoutSessionProduct `json:"products"`
}

// NewCreateCheckoutSessionRequest instantiates a new CreateCheckoutSessionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCheckoutSessionRequest(cancelUrl string, successUrl string, products []CreateCheckoutSessionProduct) *CreateCheckoutSessionRequest {
	this := CreateCheckoutSessionRequest{}
	this.CancelUrl = cancelUrl
	this.SuccessUrl = successUrl
	this.Products = products
	return &this
}

// NewCreateCheckoutSessionRequestWithDefaults instantiates a new CreateCheckoutSessionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCheckoutSessionRequestWithDefaults() *CreateCheckoutSessionRequest {
	this := CreateCheckoutSessionRequest{}
	return &this
}

// GetCancelUrl returns the CancelUrl field value
func (o *CreateCheckoutSessionRequest) GetCancelUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value
// and a boolean to check if the value has been set.
func (o *CreateCheckoutSessionRequest) GetCancelUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelUrl, true
}

// SetCancelUrl sets field value
func (o *CreateCheckoutSessionRequest) SetCancelUrl(v string) {
	o.CancelUrl = v
}

// GetSuccessUrl returns the SuccessUrl field value
func (o *CreateCheckoutSessionRequest) GetSuccessUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuccessUrl
}

// GetSuccessUrlOk returns a tuple with the SuccessUrl field value
// and a boolean to check if the value has been set.
func (o *CreateCheckoutSessionRequest) GetSuccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessUrl, true
}

// SetSuccessUrl sets field value
func (o *CreateCheckoutSessionRequest) SetSuccessUrl(v string) {
	o.SuccessUrl = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CreateCheckoutSessionRequest) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCheckoutSessionRequest) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CreateCheckoutSessionRequest) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CreateCheckoutSessionRequest) SetCurrency(v string) {
	o.Currency = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *CreateCheckoutSessionRequest) GetLocale() string {
	if o == nil || o.Locale == nil {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCheckoutSessionRequest) GetLocaleOk() (*string, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *CreateCheckoutSessionRequest) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *CreateCheckoutSessionRequest) SetLocale(v string) {
	o.Locale = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CreateCheckoutSessionRequest) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCheckoutSessionRequest) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateCheckoutSessionRequest) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CreateCheckoutSessionRequest) SetEmail(v string) {
	o.Email = &v
}

// GetProducts returns the Products field value
func (o *CreateCheckoutSessionRequest) GetProducts() []CreateCheckoutSessionProduct {
	if o == nil {
		var ret []CreateCheckoutSessionProduct
		return ret
	}

	return o.Products
}

// GetProductsOk returns a tuple with the Products field value
// and a boolean to check if the value has been set.
func (o *CreateCheckoutSessionRequest) GetProductsOk() ([]CreateCheckoutSessionProduct, bool) {
	if o == nil {
		return nil, false
	}
	return o.Products, true
}

// SetProducts sets field value
func (o *CreateCheckoutSessionRequest) SetProducts(v []CreateCheckoutSessionProduct) {
	o.Products = v
}

func (o CreateCheckoutSessionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cancel_url"] = o.CancelUrl
	}
	if true {
		toSerialize["success_url"] = o.SuccessUrl
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["products"] = o.Products
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCheckoutSessionRequest struct {
	value *CreateCheckoutSessionRequest
	isSet bool
}

func (v NullableCreateCheckoutSessionRequest) Get() *CreateCheckoutSessionRequest {
	return v.value
}

func (v *NullableCreateCheckoutSessionRequest) Set(val *CreateCheckoutSessionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCheckoutSessionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCheckoutSessionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCheckoutSessionRequest(val *CreateCheckoutSessionRequest) *NullableCreateCheckoutSessionRequest {
	return &NullableCreateCheckoutSessionRequest{value: val, isSet: true}
}

func (v NullableCreateCheckoutSessionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCheckoutSessionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


