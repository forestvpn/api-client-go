/*
ForestVPN API

ForestVPN defeats content restrictions and censorship to deliver unlimited access to video, music, social media, and more, from anywhere in the world. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// AppStoreReceiptVerificationRequest struct for AppStoreReceiptVerificationRequest
type AppStoreReceiptVerificationRequest struct {
	// The latest Base64-encoded transaction receipt.
	Receipt string `json:"receipt"`
	Price *int64 `json:"price,omitempty"`
	Currency *string `json:"currency,omitempty"`
}

// NewAppStoreReceiptVerificationRequest instantiates a new AppStoreReceiptVerificationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppStoreReceiptVerificationRequest(receipt string) *AppStoreReceiptVerificationRequest {
	this := AppStoreReceiptVerificationRequest{}
	this.Receipt = receipt
	return &this
}

// NewAppStoreReceiptVerificationRequestWithDefaults instantiates a new AppStoreReceiptVerificationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStoreReceiptVerificationRequestWithDefaults() *AppStoreReceiptVerificationRequest {
	this := AppStoreReceiptVerificationRequest{}
	return &this
}

// GetReceipt returns the Receipt field value
func (o *AppStoreReceiptVerificationRequest) GetReceipt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Receipt
}

// GetReceiptOk returns a tuple with the Receipt field value
// and a boolean to check if the value has been set.
func (o *AppStoreReceiptVerificationRequest) GetReceiptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receipt, true
}

// SetReceipt sets field value
func (o *AppStoreReceiptVerificationRequest) SetReceipt(v string) {
	o.Receipt = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AppStoreReceiptVerificationRequest) GetPrice() int64 {
	if o == nil || o.Price == nil {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreReceiptVerificationRequest) GetPriceOk() (*int64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AppStoreReceiptVerificationRequest) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *AppStoreReceiptVerificationRequest) SetPrice(v int64) {
	o.Price = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AppStoreReceiptVerificationRequest) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppStoreReceiptVerificationRequest) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *AppStoreReceiptVerificationRequest) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *AppStoreReceiptVerificationRequest) SetCurrency(v string) {
	o.Currency = &v
}

func (o AppStoreReceiptVerificationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["receipt"] = o.Receipt
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableAppStoreReceiptVerificationRequest struct {
	value *AppStoreReceiptVerificationRequest
	isSet bool
}

func (v NullableAppStoreReceiptVerificationRequest) Get() *AppStoreReceiptVerificationRequest {
	return v.value
}

func (v *NullableAppStoreReceiptVerificationRequest) Set(val *AppStoreReceiptVerificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppStoreReceiptVerificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppStoreReceiptVerificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppStoreReceiptVerificationRequest(val *AppStoreReceiptVerificationRequest) *NullableAppStoreReceiptVerificationRequest {
	return &NullableAppStoreReceiptVerificationRequest{value: val, isSet: true}
}

func (v NullableAppStoreReceiptVerificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppStoreReceiptVerificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


