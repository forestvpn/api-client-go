/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// WireGuardPeer struct for WireGuardPeer
type WireGuardPeer struct {
	PubKey string `json:"pub_key"`
	PsKey *string `json:"ps_key,omitempty"`
	Endpoint *string `json:"endpoint,omitempty"`
	AllowedIps []string `json:"allowed_ips,omitempty"`
}

// NewWireGuardPeer instantiates a new WireGuardPeer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWireGuardPeer(pubKey string) *WireGuardPeer {
	this := WireGuardPeer{}
	this.PubKey = pubKey
	return &this
}

// NewWireGuardPeerWithDefaults instantiates a new WireGuardPeer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWireGuardPeerWithDefaults() *WireGuardPeer {
	this := WireGuardPeer{}
	return &this
}

// GetPubKey returns the PubKey field value
func (o *WireGuardPeer) GetPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value
// and a boolean to check if the value has been set.
func (o *WireGuardPeer) GetPubKeyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PubKey, true
}

// SetPubKey sets field value
func (o *WireGuardPeer) SetPubKey(v string) {
	o.PubKey = v
}

// GetPsKey returns the PsKey field value if set, zero value otherwise.
func (o *WireGuardPeer) GetPsKey() string {
	if o == nil || isNil(o.PsKey) {
		var ret string
		return ret
	}
	return *o.PsKey
}

// GetPsKeyOk returns a tuple with the PsKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPeer) GetPsKeyOk() (*string, bool) {
	if o == nil || isNil(o.PsKey) {
    return nil, false
	}
	return o.PsKey, true
}

// HasPsKey returns a boolean if a field has been set.
func (o *WireGuardPeer) HasPsKey() bool {
	if o != nil && !isNil(o.PsKey) {
		return true
	}

	return false
}

// SetPsKey gets a reference to the given string and assigns it to the PsKey field.
func (o *WireGuardPeer) SetPsKey(v string) {
	o.PsKey = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *WireGuardPeer) GetEndpoint() string {
	if o == nil || isNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPeer) GetEndpointOk() (*string, bool) {
	if o == nil || isNil(o.Endpoint) {
    return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *WireGuardPeer) HasEndpoint() bool {
	if o != nil && !isNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *WireGuardPeer) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetAllowedIps returns the AllowedIps field value if set, zero value otherwise.
func (o *WireGuardPeer) GetAllowedIps() []string {
	if o == nil || isNil(o.AllowedIps) {
		var ret []string
		return ret
	}
	return o.AllowedIps
}

// GetAllowedIpsOk returns a tuple with the AllowedIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPeer) GetAllowedIpsOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedIps) {
    return nil, false
	}
	return o.AllowedIps, true
}

// HasAllowedIps returns a boolean if a field has been set.
func (o *WireGuardPeer) HasAllowedIps() bool {
	if o != nil && !isNil(o.AllowedIps) {
		return true
	}

	return false
}

// SetAllowedIps gets a reference to the given []string and assigns it to the AllowedIps field.
func (o *WireGuardPeer) SetAllowedIps(v []string) {
	o.AllowedIps = v
}

func (o WireGuardPeer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pub_key"] = o.PubKey
	}
	if !isNil(o.PsKey) {
		toSerialize["ps_key"] = o.PsKey
	}
	if !isNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !isNil(o.AllowedIps) {
		toSerialize["allowed_ips"] = o.AllowedIps
	}
	return json.Marshal(toSerialize)
}

type NullableWireGuardPeer struct {
	value *WireGuardPeer
	isSet bool
}

func (v NullableWireGuardPeer) Get() *WireGuardPeer {
	return v.value
}

func (v *NullableWireGuardPeer) Set(val *WireGuardPeer) {
	v.value = val
	v.isSet = true
}

func (v NullableWireGuardPeer) IsSet() bool {
	return v.isSet
}

func (v *NullableWireGuardPeer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWireGuardPeer(val *WireGuardPeer) *NullableWireGuardPeer {
	return &NullableWireGuardPeer{value: val, isSet: true}
}

func (v NullableWireGuardPeer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWireGuardPeer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


