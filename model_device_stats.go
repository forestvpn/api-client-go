/*
ForestVPN API

ForestVPN defeats content restrictions and censorship to deliver unlimited access to video, music, social media, and more, from anywhere in the world. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
	"time"
)

// DeviceStats struct for DeviceStats
type DeviceStats struct {
	Id *string `json:"id,omitempty"`
	Connections *float32 `json:"connections,omitempty"`
	ReceivedBytes *float32 `json:"received_bytes,omitempty"`
	TransmittedBytes *float32 `json:"transmitted_bytes,omitempty"`
	BlockedAds *float32 `json:"blocked_ads,omitempty"`
	BlockedMalwares *float32 `json:"blocked_malwares,omitempty"`
	Date *time.Time `json:"date,omitempty"`
}

// NewDeviceStats instantiates a new DeviceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceStats() *DeviceStats {
	this := DeviceStats{}
	return &this
}

// NewDeviceStatsWithDefaults instantiates a new DeviceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceStatsWithDefaults() *DeviceStats {
	this := DeviceStats{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceStats) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceStats) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceStats) SetId(v string) {
	o.Id = &v
}

// GetConnections returns the Connections field value if set, zero value otherwise.
func (o *DeviceStats) GetConnections() float32 {
	if o == nil || o.Connections == nil {
		var ret float32
		return ret
	}
	return *o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetConnectionsOk() (*float32, bool) {
	if o == nil || o.Connections == nil {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *DeviceStats) HasConnections() bool {
	if o != nil && o.Connections != nil {
		return true
	}

	return false
}

// SetConnections gets a reference to the given float32 and assigns it to the Connections field.
func (o *DeviceStats) SetConnections(v float32) {
	o.Connections = &v
}

// GetReceivedBytes returns the ReceivedBytes field value if set, zero value otherwise.
func (o *DeviceStats) GetReceivedBytes() float32 {
	if o == nil || o.ReceivedBytes == nil {
		var ret float32
		return ret
	}
	return *o.ReceivedBytes
}

// GetReceivedBytesOk returns a tuple with the ReceivedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetReceivedBytesOk() (*float32, bool) {
	if o == nil || o.ReceivedBytes == nil {
		return nil, false
	}
	return o.ReceivedBytes, true
}

// HasReceivedBytes returns a boolean if a field has been set.
func (o *DeviceStats) HasReceivedBytes() bool {
	if o != nil && o.ReceivedBytes != nil {
		return true
	}

	return false
}

// SetReceivedBytes gets a reference to the given float32 and assigns it to the ReceivedBytes field.
func (o *DeviceStats) SetReceivedBytes(v float32) {
	o.ReceivedBytes = &v
}

// GetTransmittedBytes returns the TransmittedBytes field value if set, zero value otherwise.
func (o *DeviceStats) GetTransmittedBytes() float32 {
	if o == nil || o.TransmittedBytes == nil {
		var ret float32
		return ret
	}
	return *o.TransmittedBytes
}

// GetTransmittedBytesOk returns a tuple with the TransmittedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetTransmittedBytesOk() (*float32, bool) {
	if o == nil || o.TransmittedBytes == nil {
		return nil, false
	}
	return o.TransmittedBytes, true
}

// HasTransmittedBytes returns a boolean if a field has been set.
func (o *DeviceStats) HasTransmittedBytes() bool {
	if o != nil && o.TransmittedBytes != nil {
		return true
	}

	return false
}

// SetTransmittedBytes gets a reference to the given float32 and assigns it to the TransmittedBytes field.
func (o *DeviceStats) SetTransmittedBytes(v float32) {
	o.TransmittedBytes = &v
}

// GetBlockedAds returns the BlockedAds field value if set, zero value otherwise.
func (o *DeviceStats) GetBlockedAds() float32 {
	if o == nil || o.BlockedAds == nil {
		var ret float32
		return ret
	}
	return *o.BlockedAds
}

// GetBlockedAdsOk returns a tuple with the BlockedAds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetBlockedAdsOk() (*float32, bool) {
	if o == nil || o.BlockedAds == nil {
		return nil, false
	}
	return o.BlockedAds, true
}

// HasBlockedAds returns a boolean if a field has been set.
func (o *DeviceStats) HasBlockedAds() bool {
	if o != nil && o.BlockedAds != nil {
		return true
	}

	return false
}

// SetBlockedAds gets a reference to the given float32 and assigns it to the BlockedAds field.
func (o *DeviceStats) SetBlockedAds(v float32) {
	o.BlockedAds = &v
}

// GetBlockedMalwares returns the BlockedMalwares field value if set, zero value otherwise.
func (o *DeviceStats) GetBlockedMalwares() float32 {
	if o == nil || o.BlockedMalwares == nil {
		var ret float32
		return ret
	}
	return *o.BlockedMalwares
}

// GetBlockedMalwaresOk returns a tuple with the BlockedMalwares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetBlockedMalwaresOk() (*float32, bool) {
	if o == nil || o.BlockedMalwares == nil {
		return nil, false
	}
	return o.BlockedMalwares, true
}

// HasBlockedMalwares returns a boolean if a field has been set.
func (o *DeviceStats) HasBlockedMalwares() bool {
	if o != nil && o.BlockedMalwares != nil {
		return true
	}

	return false
}

// SetBlockedMalwares gets a reference to the given float32 and assigns it to the BlockedMalwares field.
func (o *DeviceStats) SetBlockedMalwares(v float32) {
	o.BlockedMalwares = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DeviceStats) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStats) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DeviceStats) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *DeviceStats) SetDate(v time.Time) {
	o.Date = &v
}

func (o DeviceStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Connections != nil {
		toSerialize["connections"] = o.Connections
	}
	if o.ReceivedBytes != nil {
		toSerialize["received_bytes"] = o.ReceivedBytes
	}
	if o.TransmittedBytes != nil {
		toSerialize["transmitted_bytes"] = o.TransmittedBytes
	}
	if o.BlockedAds != nil {
		toSerialize["blocked_ads"] = o.BlockedAds
	}
	if o.BlockedMalwares != nil {
		toSerialize["blocked_malwares"] = o.BlockedMalwares
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceStats struct {
	value *DeviceStats
	isSet bool
}

func (v NullableDeviceStats) Get() *DeviceStats {
	return v.value
}

func (v *NullableDeviceStats) Set(val *DeviceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceStats(val *DeviceStats) *NullableDeviceStats {
	return &NullableDeviceStats{value: val, isSet: true}
}

func (v NullableDeviceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


