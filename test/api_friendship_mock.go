// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_friendship.go

// Package forestvpn_api_test is a generated GoMock package.
package forestvpn_api_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockFriendshipApi is a mock of FriendshipApi interface.
type MockFriendshipApi struct {
	ctrl     *gomock.Controller
	recorder *MockFriendshipApiMockRecorder
}

// MockFriendshipApiMockRecorder is the mock recorder for MockFriendshipApi.
type MockFriendshipApiMockRecorder struct {
	mock *MockFriendshipApi
}

// NewMockFriendshipApi creates a new mock instance.
func NewMockFriendshipApi(ctrl *gomock.Controller) *MockFriendshipApi {
	mock := &MockFriendshipApi{ctrl: ctrl}
	mock.recorder = &MockFriendshipApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendshipApi) EXPECT() *MockFriendshipApiMockRecorder {
	return m.recorder
}

// AcceptFriendshipInvitation mocks base method.
func (m *MockFriendshipApi) AcceptFriendshipInvitation(ctx context.Context, code string) api_client_go.ApiAcceptFriendshipInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendshipInvitation", ctx, code)
	ret0, _ := ret[0].(api_client_go.ApiAcceptFriendshipInvitationRequest)
	return ret0
}

// AcceptFriendshipInvitation indicates an expected call of AcceptFriendshipInvitation.
func (mr *MockFriendshipApiMockRecorder) AcceptFriendshipInvitation(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendshipInvitation", reflect.TypeOf((*MockFriendshipApi)(nil).AcceptFriendshipInvitation), ctx, code)
}

// AcceptFriendshipInvitationExecute mocks base method.
func (m *MockFriendshipApi) AcceptFriendshipInvitationExecute(r api_client_go.ApiAcceptFriendshipInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendshipInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptFriendshipInvitationExecute indicates an expected call of AcceptFriendshipInvitationExecute.
func (mr *MockFriendshipApiMockRecorder) AcceptFriendshipInvitationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendshipInvitationExecute", reflect.TypeOf((*MockFriendshipApi)(nil).AcceptFriendshipInvitationExecute), r)
}

// CreateFriendshipInvitation mocks base method.
func (m *MockFriendshipApi) CreateFriendshipInvitation(ctx context.Context) api_client_go.ApiCreateFriendshipInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendshipInvitation", ctx)
	ret0, _ := ret[0].(api_client_go.ApiCreateFriendshipInvitationRequest)
	return ret0
}

// CreateFriendshipInvitation indicates an expected call of CreateFriendshipInvitation.
func (mr *MockFriendshipApiMockRecorder) CreateFriendshipInvitation(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendshipInvitation", reflect.TypeOf((*MockFriendshipApi)(nil).CreateFriendshipInvitation), ctx)
}

// CreateFriendshipInvitationExecute mocks base method.
func (m *MockFriendshipApi) CreateFriendshipInvitationExecute(r api_client_go.ApiCreateFriendshipInvitationRequest) (*api_client_go.FriendshipInvitation, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendshipInvitationExecute", r)
	ret0, _ := ret[0].(*api_client_go.FriendshipInvitation)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFriendshipInvitationExecute indicates an expected call of CreateFriendshipInvitationExecute.
func (mr *MockFriendshipApiMockRecorder) CreateFriendshipInvitationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendshipInvitationExecute", reflect.TypeOf((*MockFriendshipApi)(nil).CreateFriendshipInvitationExecute), r)
}

// DeleteFriend mocks base method.
func (m *MockFriendshipApi) DeleteFriend(ctx context.Context, id string) api_client_go.ApiDeleteFriendRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", ctx, id)
	ret0, _ := ret[0].(api_client_go.ApiDeleteFriendRequest)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockFriendshipApiMockRecorder) DeleteFriend(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockFriendshipApi)(nil).DeleteFriend), ctx, id)
}

// DeleteFriendExecute mocks base method.
func (m *MockFriendshipApi) DeleteFriendExecute(r api_client_go.ApiDeleteFriendRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriendExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFriendExecute indicates an expected call of DeleteFriendExecute.
func (mr *MockFriendshipApiMockRecorder) DeleteFriendExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendExecute", reflect.TypeOf((*MockFriendshipApi)(nil).DeleteFriendExecute), r)
}

// GetFriend mocks base method.
func (m *MockFriendshipApi) GetFriend(ctx context.Context, id string) api_client_go.ApiGetFriendRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriend", ctx, id)
	ret0, _ := ret[0].(api_client_go.ApiGetFriendRequest)
	return ret0
}

// GetFriend indicates an expected call of GetFriend.
func (mr *MockFriendshipApiMockRecorder) GetFriend(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriend", reflect.TypeOf((*MockFriendshipApi)(nil).GetFriend), ctx, id)
}

// GetFriendExecute mocks base method.
func (m *MockFriendshipApi) GetFriendExecute(r api_client_go.ApiGetFriendRequest) (*api_client_go.Friendship, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendExecute", r)
	ret0, _ := ret[0].(*api_client_go.Friendship)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendExecute indicates an expected call of GetFriendExecute.
func (mr *MockFriendshipApiMockRecorder) GetFriendExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendExecute", reflect.TypeOf((*MockFriendshipApi)(nil).GetFriendExecute), r)
}

// GetFriendshipInvitation mocks base method.
func (m *MockFriendshipApi) GetFriendshipInvitation(ctx context.Context, code string) api_client_go.ApiGetFriendshipInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendshipInvitation", ctx, code)
	ret0, _ := ret[0].(api_client_go.ApiGetFriendshipInvitationRequest)
	return ret0
}

// GetFriendshipInvitation indicates an expected call of GetFriendshipInvitation.
func (mr *MockFriendshipApiMockRecorder) GetFriendshipInvitation(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendshipInvitation", reflect.TypeOf((*MockFriendshipApi)(nil).GetFriendshipInvitation), ctx, code)
}

// GetFriendshipInvitationExecute mocks base method.
func (m *MockFriendshipApi) GetFriendshipInvitationExecute(r api_client_go.ApiGetFriendshipInvitationRequest) (*api_client_go.FriendshipInvitation, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendshipInvitationExecute", r)
	ret0, _ := ret[0].(*api_client_go.FriendshipInvitation)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendshipInvitationExecute indicates an expected call of GetFriendshipInvitationExecute.
func (mr *MockFriendshipApiMockRecorder) GetFriendshipInvitationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendshipInvitationExecute", reflect.TypeOf((*MockFriendshipApi)(nil).GetFriendshipInvitationExecute), r)
}

// ListFriends mocks base method.
func (m *MockFriendshipApi) ListFriends(ctx context.Context) api_client_go.ApiListFriendsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriends", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListFriendsRequest)
	return ret0
}

// ListFriends indicates an expected call of ListFriends.
func (mr *MockFriendshipApiMockRecorder) ListFriends(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriends", reflect.TypeOf((*MockFriendshipApi)(nil).ListFriends), ctx)
}

// ListFriendsExecute mocks base method.
func (m *MockFriendshipApi) ListFriendsExecute(r api_client_go.ApiListFriendsRequest) ([]api_client_go.Friendship, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriendsExecute", r)
	ret0, _ := ret[0].([]api_client_go.Friendship)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFriendsExecute indicates an expected call of ListFriendsExecute.
func (mr *MockFriendshipApiMockRecorder) ListFriendsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriendsExecute", reflect.TypeOf((*MockFriendshipApi)(nil).ListFriendsExecute), r)
}

// RejectFriendshipInvitation mocks base method.
func (m *MockFriendshipApi) RejectFriendshipInvitation(ctx context.Context, code string) api_client_go.ApiRejectFriendshipInvitationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectFriendshipInvitation", ctx, code)
	ret0, _ := ret[0].(api_client_go.ApiRejectFriendshipInvitationRequest)
	return ret0
}

// RejectFriendshipInvitation indicates an expected call of RejectFriendshipInvitation.
func (mr *MockFriendshipApiMockRecorder) RejectFriendshipInvitation(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectFriendshipInvitation", reflect.TypeOf((*MockFriendshipApi)(nil).RejectFriendshipInvitation), ctx, code)
}

// RejectFriendshipInvitationExecute mocks base method.
func (m *MockFriendshipApi) RejectFriendshipInvitationExecute(r api_client_go.ApiRejectFriendshipInvitationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectFriendshipInvitationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectFriendshipInvitationExecute indicates an expected call of RejectFriendshipInvitationExecute.
func (mr *MockFriendshipApiMockRecorder) RejectFriendshipInvitationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectFriendshipInvitationExecute", reflect.TypeOf((*MockFriendshipApi)(nil).RejectFriendshipInvitationExecute), r)
}
