// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_wireguard.go

// Package forestvpn_api_test is a generated GoMock package.
package forestvpn_api_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockWireguardApi is a mock of WireguardApi interface.
type MockWireguardApi struct {
	ctrl     *gomock.Controller
	recorder *MockWireguardApiMockRecorder
}

// MockWireguardApiMockRecorder is the mock recorder for MockWireguardApi.
type MockWireguardApiMockRecorder struct {
	mock *MockWireguardApi
}

// NewMockWireguardApi creates a new mock instance.
func NewMockWireguardApi(ctrl *gomock.Controller) *MockWireguardApi {
	mock := &MockWireguardApi{ctrl: ctrl}
	mock.recorder = &MockWireguardApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWireguardApi) EXPECT() *MockWireguardApiMockRecorder {
	return m.recorder
}

// GetWireGuardPeerInfo mocks base method.
func (m *MockWireguardApi) GetWireGuardPeerInfo(ctx context.Context, pubKey string) api_client_go.ApiGetWireGuardPeerInfoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWireGuardPeerInfo", ctx, pubKey)
	ret0, _ := ret[0].(api_client_go.ApiGetWireGuardPeerInfoRequest)
	return ret0
}

// GetWireGuardPeerInfo indicates an expected call of GetWireGuardPeerInfo.
func (mr *MockWireguardApiMockRecorder) GetWireGuardPeerInfo(ctx, pubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWireGuardPeerInfo", reflect.TypeOf((*MockWireguardApi)(nil).GetWireGuardPeerInfo), ctx, pubKey)
}

// GetWireGuardPeerInfoExecute mocks base method.
func (m *MockWireguardApi) GetWireGuardPeerInfoExecute(r api_client_go.ApiGetWireGuardPeerInfoRequest) (*api_client_go.WireGuardPeerInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWireGuardPeerInfoExecute", r)
	ret0, _ := ret[0].(*api_client_go.WireGuardPeerInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWireGuardPeerInfoExecute indicates an expected call of GetWireGuardPeerInfoExecute.
func (mr *MockWireguardApiMockRecorder) GetWireGuardPeerInfoExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWireGuardPeerInfoExecute", reflect.TypeOf((*MockWireguardApi)(nil).GetWireGuardPeerInfoExecute), r)
}

// ListWireGuardPeers mocks base method.
func (m *MockWireguardApi) ListWireGuardPeers(ctx context.Context) api_client_go.ApiListWireGuardPeersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWireGuardPeers", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListWireGuardPeersRequest)
	return ret0
}

// ListWireGuardPeers indicates an expected call of ListWireGuardPeers.
func (mr *MockWireguardApiMockRecorder) ListWireGuardPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWireGuardPeers", reflect.TypeOf((*MockWireguardApi)(nil).ListWireGuardPeers), ctx)
}

// ListWireGuardPeersExecute mocks base method.
func (m *MockWireguardApi) ListWireGuardPeersExecute(r api_client_go.ApiListWireGuardPeersRequest) ([]api_client_go.WireGuardPeerInfo, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWireGuardPeersExecute", r)
	ret0, _ := ret[0].([]api_client_go.WireGuardPeerInfo)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWireGuardPeersExecute indicates an expected call of ListWireGuardPeersExecute.
func (mr *MockWireguardApiMockRecorder) ListWireGuardPeersExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWireGuardPeersExecute", reflect.TypeOf((*MockWireguardApi)(nil).ListWireGuardPeersExecute), r)
}
