/*
ForestVPN API

Testing FriendshipApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package forestvpn_api_test

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "github.com/forestvpn/api-client-go"
)

func Test_forestvpn_api_FriendshipApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test FriendshipApiService AcceptFriendshipInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var code string

        resp, httpRes, err := apiClient.FriendshipApi.AcceptFriendshipInvitation(context.Background(), code).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FriendshipApiService CreateFriendshipInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.FriendshipApi.CreateFriendshipInvitation(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FriendshipApiService DeleteFriend", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.FriendshipApi.DeleteFriend(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FriendshipApiService GetFriend", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var id string

        resp, httpRes, err := apiClient.FriendshipApi.GetFriend(context.Background(), id).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FriendshipApiService GetFriendshipInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var code string

        resp, httpRes, err := apiClient.FriendshipApi.GetFriendshipInvitation(context.Background(), code).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FriendshipApiService ListFriends", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.FriendshipApi.ListFriends(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FriendshipApiService RejectFriendshipInvitation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var code string

        resp, httpRes, err := apiClient.FriendshipApi.RejectFriendshipInvitation(context.Background(), code).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
