// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_device.go

// Package forestvpn_api_test is a generated GoMock package.
package forestvpn_api_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceApi is a mock of DeviceApi interface.
type MockDeviceApi struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceApiMockRecorder
}

// MockDeviceApiMockRecorder is the mock recorder for MockDeviceApi.
type MockDeviceApiMockRecorder struct {
	mock *MockDeviceApi
}

// NewMockDeviceApi creates a new mock instance.
func NewMockDeviceApi(ctrl *gomock.Controller) *MockDeviceApi {
	mock := &MockDeviceApi{ctrl: ctrl}
	mock.recorder = &MockDeviceApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceApi) EXPECT() *MockDeviceApiMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDeviceApi) CreateDevice(ctx context.Context) api_client_go.ApiCreateDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx)
	ret0, _ := ret[0].(api_client_go.ApiCreateDeviceRequest)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceApiMockRecorder) CreateDevice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceApi)(nil).CreateDevice), ctx)
}

// CreateDeviceExecute mocks base method.
func (m *MockDeviceApi) CreateDeviceExecute(r api_client_go.ApiCreateDeviceRequest) (*api_client_go.Device, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceExecute", r)
	ret0, _ := ret[0].(*api_client_go.Device)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDeviceExecute indicates an expected call of CreateDeviceExecute.
func (mr *MockDeviceApiMockRecorder) CreateDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceExecute", reflect.TypeOf((*MockDeviceApi)(nil).CreateDeviceExecute), r)
}

// CreateDevicePortForwarding mocks base method.
func (m *MockDeviceApi) CreateDevicePortForwarding(ctx context.Context, deviceID string) api_client_go.ApiCreateDevicePortForwardingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevicePortForwarding", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiCreateDevicePortForwardingRequest)
	return ret0
}

// CreateDevicePortForwarding indicates an expected call of CreateDevicePortForwarding.
func (mr *MockDeviceApiMockRecorder) CreateDevicePortForwarding(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevicePortForwarding", reflect.TypeOf((*MockDeviceApi)(nil).CreateDevicePortForwarding), ctx, deviceID)
}

// CreateDevicePortForwardingExecute mocks base method.
func (m *MockDeviceApi) CreateDevicePortForwardingExecute(r api_client_go.ApiCreateDevicePortForwardingRequest) (*api_client_go.PortForwarding, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevicePortForwardingExecute", r)
	ret0, _ := ret[0].(*api_client_go.PortForwarding)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDevicePortForwardingExecute indicates an expected call of CreateDevicePortForwardingExecute.
func (mr *MockDeviceApiMockRecorder) CreateDevicePortForwardingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevicePortForwardingExecute", reflect.TypeOf((*MockDeviceApi)(nil).CreateDevicePortForwardingExecute), r)
}

// DeleteDevice mocks base method.
func (m *MockDeviceApi) DeleteDevice(ctx context.Context, deviceID string) api_client_go.ApiDeleteDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiDeleteDeviceRequest)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockDeviceApiMockRecorder) DeleteDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDeviceApi)(nil).DeleteDevice), ctx, deviceID)
}

// DeleteDeviceExecute mocks base method.
func (m *MockDeviceApi) DeleteDeviceExecute(r api_client_go.ApiDeleteDeviceRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeviceExecute indicates an expected call of DeleteDeviceExecute.
func (mr *MockDeviceApiMockRecorder) DeleteDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceExecute", reflect.TypeOf((*MockDeviceApi)(nil).DeleteDeviceExecute), r)
}

// DeleteDevicePortForwarding mocks base method.
func (m *MockDeviceApi) DeleteDevicePortForwarding(ctx context.Context, deviceID, portForwardingID string) api_client_go.ApiDeleteDevicePortForwardingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevicePortForwarding", ctx, deviceID, portForwardingID)
	ret0, _ := ret[0].(api_client_go.ApiDeleteDevicePortForwardingRequest)
	return ret0
}

// DeleteDevicePortForwarding indicates an expected call of DeleteDevicePortForwarding.
func (mr *MockDeviceApiMockRecorder) DeleteDevicePortForwarding(ctx, deviceID, portForwardingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevicePortForwarding", reflect.TypeOf((*MockDeviceApi)(nil).DeleteDevicePortForwarding), ctx, deviceID, portForwardingID)
}

// DeleteDevicePortForwardingExecute mocks base method.
func (m *MockDeviceApi) DeleteDevicePortForwardingExecute(r api_client_go.ApiDeleteDevicePortForwardingRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevicePortForwardingExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevicePortForwardingExecute indicates an expected call of DeleteDevicePortForwardingExecute.
func (mr *MockDeviceApiMockRecorder) DeleteDevicePortForwardingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevicePortForwardingExecute", reflect.TypeOf((*MockDeviceApi)(nil).DeleteDevicePortForwardingExecute), r)
}

// GetDevice mocks base method.
func (m *MockDeviceApi) GetDevice(ctx context.Context, deviceID string) api_client_go.ApiGetDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiGetDeviceRequest)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockDeviceApiMockRecorder) GetDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceApi)(nil).GetDevice), ctx, deviceID)
}

// GetDeviceExecute mocks base method.
func (m *MockDeviceApi) GetDeviceExecute(r api_client_go.ApiGetDeviceRequest) (*api_client_go.Device, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceExecute", r)
	ret0, _ := ret[0].(*api_client_go.Device)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceExecute indicates an expected call of GetDeviceExecute.
func (mr *MockDeviceApiMockRecorder) GetDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceExecute", reflect.TypeOf((*MockDeviceApi)(nil).GetDeviceExecute), r)
}

// GetDeviceStats mocks base method.
func (m *MockDeviceApi) GetDeviceStats(ctx context.Context, deviceID, statsID string) api_client_go.ApiGetDeviceStatsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStats", ctx, deviceID, statsID)
	ret0, _ := ret[0].(api_client_go.ApiGetDeviceStatsRequest)
	return ret0
}

// GetDeviceStats indicates an expected call of GetDeviceStats.
func (mr *MockDeviceApiMockRecorder) GetDeviceStats(ctx, deviceID, statsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStats", reflect.TypeOf((*MockDeviceApi)(nil).GetDeviceStats), ctx, deviceID, statsID)
}

// GetDeviceStatsExecute mocks base method.
func (m *MockDeviceApi) GetDeviceStatsExecute(r api_client_go.ApiGetDeviceStatsRequest) (*api_client_go.DeviceStats, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStatsExecute", r)
	ret0, _ := ret[0].(*api_client_go.DeviceStats)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceStatsExecute indicates an expected call of GetDeviceStatsExecute.
func (mr *MockDeviceApiMockRecorder) GetDeviceStatsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStatsExecute", reflect.TypeOf((*MockDeviceApi)(nil).GetDeviceStatsExecute), r)
}

// GetDeviceWireGuard mocks base method.
func (m *MockDeviceApi) GetDeviceWireGuard(ctx context.Context, deviceID, wireGuardID string) api_client_go.ApiGetDeviceWireGuardRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceWireGuard", ctx, deviceID, wireGuardID)
	ret0, _ := ret[0].(api_client_go.ApiGetDeviceWireGuardRequest)
	return ret0
}

// GetDeviceWireGuard indicates an expected call of GetDeviceWireGuard.
func (mr *MockDeviceApiMockRecorder) GetDeviceWireGuard(ctx, deviceID, wireGuardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceWireGuard", reflect.TypeOf((*MockDeviceApi)(nil).GetDeviceWireGuard), ctx, deviceID, wireGuardID)
}

// GetDeviceWireGuardExecute mocks base method.
func (m *MockDeviceApi) GetDeviceWireGuardExecute(r api_client_go.ApiGetDeviceWireGuardRequest) (*api_client_go.WireGuard, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceWireGuardExecute", r)
	ret0, _ := ret[0].(*api_client_go.WireGuard)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeviceWireGuardExecute indicates an expected call of GetDeviceWireGuardExecute.
func (mr *MockDeviceApiMockRecorder) GetDeviceWireGuardExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceWireGuardExecute", reflect.TypeOf((*MockDeviceApi)(nil).GetDeviceWireGuardExecute), r)
}

// ListDeviceBindings mocks base method.
func (m *MockDeviceApi) ListDeviceBindings(ctx context.Context, deviceID string) api_client_go.ApiListDeviceBindingsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceBindings", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiListDeviceBindingsRequest)
	return ret0
}

// ListDeviceBindings indicates an expected call of ListDeviceBindings.
func (mr *MockDeviceApiMockRecorder) ListDeviceBindings(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceBindings", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceBindings), ctx, deviceID)
}

// ListDeviceBindingsExecute mocks base method.
func (m *MockDeviceApi) ListDeviceBindingsExecute(r api_client_go.ApiListDeviceBindingsRequest) ([]string, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceBindingsExecute", r)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeviceBindingsExecute indicates an expected call of ListDeviceBindingsExecute.
func (mr *MockDeviceApiMockRecorder) ListDeviceBindingsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceBindingsExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceBindingsExecute), r)
}

// ListDeviceConnectionModes mocks base method.
func (m *MockDeviceApi) ListDeviceConnectionModes(ctx context.Context, deviceID string) api_client_go.ApiListDeviceConnectionModesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceConnectionModes", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiListDeviceConnectionModesRequest)
	return ret0
}

// ListDeviceConnectionModes indicates an expected call of ListDeviceConnectionModes.
func (mr *MockDeviceApiMockRecorder) ListDeviceConnectionModes(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceConnectionModes", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceConnectionModes), ctx, deviceID)
}

// ListDeviceConnectionModesExecute mocks base method.
func (m *MockDeviceApi) ListDeviceConnectionModesExecute(r api_client_go.ApiListDeviceConnectionModesRequest) ([]api_client_go.ConnectionMode, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceConnectionModesExecute", r)
	ret0, _ := ret[0].([]api_client_go.ConnectionMode)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeviceConnectionModesExecute indicates an expected call of ListDeviceConnectionModesExecute.
func (mr *MockDeviceApiMockRecorder) ListDeviceConnectionModesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceConnectionModesExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceConnectionModesExecute), r)
}

// ListDeviceDetailStats mocks base method.
func (m *MockDeviceApi) ListDeviceDetailStats(ctx context.Context, deviceID string) api_client_go.ApiListDeviceDetailStatsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceDetailStats", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiListDeviceDetailStatsRequest)
	return ret0
}

// ListDeviceDetailStats indicates an expected call of ListDeviceDetailStats.
func (mr *MockDeviceApiMockRecorder) ListDeviceDetailStats(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceDetailStats", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceDetailStats), ctx, deviceID)
}

// ListDeviceDetailStatsExecute mocks base method.
func (m *MockDeviceApi) ListDeviceDetailStatsExecute(r api_client_go.ApiListDeviceDetailStatsRequest) ([]api_client_go.DeviceStats, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceDetailStatsExecute", r)
	ret0, _ := ret[0].([]api_client_go.DeviceStats)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeviceDetailStatsExecute indicates an expected call of ListDeviceDetailStatsExecute.
func (mr *MockDeviceApiMockRecorder) ListDeviceDetailStatsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceDetailStatsExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceDetailStatsExecute), r)
}

// ListDevicePortForwardings mocks base method.
func (m *MockDeviceApi) ListDevicePortForwardings(ctx context.Context, deviceID string) api_client_go.ApiListDevicePortForwardingsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicePortForwardings", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiListDevicePortForwardingsRequest)
	return ret0
}

// ListDevicePortForwardings indicates an expected call of ListDevicePortForwardings.
func (mr *MockDeviceApiMockRecorder) ListDevicePortForwardings(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePortForwardings", reflect.TypeOf((*MockDeviceApi)(nil).ListDevicePortForwardings), ctx, deviceID)
}

// ListDevicePortForwardingsExecute mocks base method.
func (m *MockDeviceApi) ListDevicePortForwardingsExecute(r api_client_go.ApiListDevicePortForwardingsRequest) ([]api_client_go.PortForwarding, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicePortForwardingsExecute", r)
	ret0, _ := ret[0].([]api_client_go.PortForwarding)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDevicePortForwardingsExecute indicates an expected call of ListDevicePortForwardingsExecute.
func (mr *MockDeviceApiMockRecorder) ListDevicePortForwardingsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePortForwardingsExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDevicePortForwardingsExecute), r)
}

// ListDeviceStats mocks base method.
func (m *MockDeviceApi) ListDeviceStats(ctx context.Context, deviceID string) api_client_go.ApiListDeviceStatsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceStats", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiListDeviceStatsRequest)
	return ret0
}

// ListDeviceStats indicates an expected call of ListDeviceStats.
func (mr *MockDeviceApiMockRecorder) ListDeviceStats(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceStats", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceStats), ctx, deviceID)
}

// ListDeviceStatsExecute mocks base method.
func (m *MockDeviceApi) ListDeviceStatsExecute(r api_client_go.ApiListDeviceStatsRequest) ([]api_client_go.DeviceStats, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceStatsExecute", r)
	ret0, _ := ret[0].([]api_client_go.DeviceStats)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeviceStatsExecute indicates an expected call of ListDeviceStatsExecute.
func (mr *MockDeviceApiMockRecorder) ListDeviceStatsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceStatsExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceStatsExecute), r)
}

// ListDeviceWireGuardPeers mocks base method.
func (m *MockDeviceApi) ListDeviceWireGuardPeers(ctx context.Context, deviceID, wireGuardID string) api_client_go.ApiListDeviceWireGuardPeersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceWireGuardPeers", ctx, deviceID, wireGuardID)
	ret0, _ := ret[0].(api_client_go.ApiListDeviceWireGuardPeersRequest)
	return ret0
}

// ListDeviceWireGuardPeers indicates an expected call of ListDeviceWireGuardPeers.
func (mr *MockDeviceApiMockRecorder) ListDeviceWireGuardPeers(ctx, deviceID, wireGuardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceWireGuardPeers", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceWireGuardPeers), ctx, deviceID, wireGuardID)
}

// ListDeviceWireGuardPeersExecute mocks base method.
func (m *MockDeviceApi) ListDeviceWireGuardPeersExecute(r api_client_go.ApiListDeviceWireGuardPeersRequest) ([]api_client_go.WireGuardPeer, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceWireGuardPeersExecute", r)
	ret0, _ := ret[0].([]api_client_go.WireGuardPeer)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeviceWireGuardPeersExecute indicates an expected call of ListDeviceWireGuardPeersExecute.
func (mr *MockDeviceApiMockRecorder) ListDeviceWireGuardPeersExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceWireGuardPeersExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceWireGuardPeersExecute), r)
}

// ListDeviceWireGuards mocks base method.
func (m *MockDeviceApi) ListDeviceWireGuards(ctx context.Context, deviceID string) api_client_go.ApiListDeviceWireGuardsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceWireGuards", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiListDeviceWireGuardsRequest)
	return ret0
}

// ListDeviceWireGuards indicates an expected call of ListDeviceWireGuards.
func (mr *MockDeviceApiMockRecorder) ListDeviceWireGuards(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceWireGuards", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceWireGuards), ctx, deviceID)
}

// ListDeviceWireGuardsExecute mocks base method.
func (m *MockDeviceApi) ListDeviceWireGuardsExecute(r api_client_go.ApiListDeviceWireGuardsRequest) ([]api_client_go.WireGuard, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceWireGuardsExecute", r)
	ret0, _ := ret[0].([]api_client_go.WireGuard)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeviceWireGuardsExecute indicates an expected call of ListDeviceWireGuardsExecute.
func (mr *MockDeviceApiMockRecorder) ListDeviceWireGuardsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceWireGuardsExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDeviceWireGuardsExecute), r)
}

// ListDevices mocks base method.
func (m *MockDeviceApi) ListDevices(ctx context.Context) api_client_go.ApiListDevicesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListDevicesRequest)
	return ret0
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockDeviceApiMockRecorder) ListDevices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockDeviceApi)(nil).ListDevices), ctx)
}

// ListDevicesExecute mocks base method.
func (m *MockDeviceApi) ListDevicesExecute(r api_client_go.ApiListDevicesRequest) ([]api_client_go.Device, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesExecute", r)
	ret0, _ := ret[0].([]api_client_go.Device)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDevicesExecute indicates an expected call of ListDevicesExecute.
func (mr *MockDeviceApiMockRecorder) ListDevicesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesExecute", reflect.TypeOf((*MockDeviceApi)(nil).ListDevicesExecute), r)
}

// UpdateDevice mocks base method.
func (m *MockDeviceApi) UpdateDevice(ctx context.Context, deviceID string) api_client_go.ApiUpdateDeviceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, deviceID)
	ret0, _ := ret[0].(api_client_go.ApiUpdateDeviceRequest)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDeviceApiMockRecorder) UpdateDevice(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceApi)(nil).UpdateDevice), ctx, deviceID)
}

// UpdateDeviceExecute mocks base method.
func (m *MockDeviceApi) UpdateDeviceExecute(r api_client_go.ApiUpdateDeviceRequest) (*api_client_go.Device, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceExecute", r)
	ret0, _ := ret[0].(*api_client_go.Device)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDeviceExecute indicates an expected call of UpdateDeviceExecute.
func (mr *MockDeviceApiMockRecorder) UpdateDeviceExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceExecute", reflect.TypeOf((*MockDeviceApi)(nil).UpdateDeviceExecute), r)
}

// UpdateDevicePortForwarding mocks base method.
func (m *MockDeviceApi) UpdateDevicePortForwarding(ctx context.Context, deviceID, portForwardingID string) api_client_go.ApiUpdateDevicePortForwardingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevicePortForwarding", ctx, deviceID, portForwardingID)
	ret0, _ := ret[0].(api_client_go.ApiUpdateDevicePortForwardingRequest)
	return ret0
}

// UpdateDevicePortForwarding indicates an expected call of UpdateDevicePortForwarding.
func (mr *MockDeviceApiMockRecorder) UpdateDevicePortForwarding(ctx, deviceID, portForwardingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevicePortForwarding", reflect.TypeOf((*MockDeviceApi)(nil).UpdateDevicePortForwarding), ctx, deviceID, portForwardingID)
}

// UpdateDevicePortForwardingExecute mocks base method.
func (m *MockDeviceApi) UpdateDevicePortForwardingExecute(r api_client_go.ApiUpdateDevicePortForwardingRequest) (*api_client_go.PortForwarding, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevicePortForwardingExecute", r)
	ret0, _ := ret[0].(*api_client_go.PortForwarding)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDevicePortForwardingExecute indicates an expected call of UpdateDevicePortForwardingExecute.
func (mr *MockDeviceApiMockRecorder) UpdateDevicePortForwardingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevicePortForwardingExecute", reflect.TypeOf((*MockDeviceApi)(nil).UpdateDevicePortForwardingExecute), r)
}
