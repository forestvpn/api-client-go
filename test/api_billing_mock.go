// Code generated by MockGen. DO NOT EDIT.
// Source: ../api-client-go/api_billing.go

// Package forestvpn_api_test is a generated GoMock package.
package forestvpn_api_test

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api_client_go "github.com/forestvpn/api-client-go"
	gomock "github.com/golang/mock/gomock"
)

// MockBillingApi is a mock of BillingApi interface.
type MockBillingApi struct {
	ctrl     *gomock.Controller
	recorder *MockBillingApiMockRecorder
}

// MockBillingApiMockRecorder is the mock recorder for MockBillingApi.
type MockBillingApiMockRecorder struct {
	mock *MockBillingApi
}

// NewMockBillingApi creates a new mock instance.
func NewMockBillingApi(ctrl *gomock.Controller) *MockBillingApi {
	mock := &MockBillingApi{ctrl: ctrl}
	mock.recorder = &MockBillingApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingApi) EXPECT() *MockBillingApiMockRecorder {
	return m.recorder
}

// CancelSubscription mocks base method.
func (m *MockBillingApi) CancelSubscription(ctx context.Context, subscriptionID string) api_client_go.ApiCancelSubscriptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(api_client_go.ApiCancelSubscriptionRequest)
	return ret0
}

// CancelSubscription indicates an expected call of CancelSubscription.
func (mr *MockBillingApiMockRecorder) CancelSubscription(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscription", reflect.TypeOf((*MockBillingApi)(nil).CancelSubscription), ctx, subscriptionID)
}

// CancelSubscriptionExecute mocks base method.
func (m *MockBillingApi) CancelSubscriptionExecute(r api_client_go.ApiCancelSubscriptionRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscriptionExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubscriptionExecute indicates an expected call of CancelSubscriptionExecute.
func (mr *MockBillingApiMockRecorder) CancelSubscriptionExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscriptionExecute", reflect.TypeOf((*MockBillingApi)(nil).CancelSubscriptionExecute), r)
}

// CreatePaymentMethodStripeSetupIntent mocks base method.
func (m *MockBillingApi) CreatePaymentMethodStripeSetupIntent(ctx context.Context) api_client_go.ApiCreatePaymentMethodStripeSetupIntentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentMethodStripeSetupIntent", ctx)
	ret0, _ := ret[0].(api_client_go.ApiCreatePaymentMethodStripeSetupIntentRequest)
	return ret0
}

// CreatePaymentMethodStripeSetupIntent indicates an expected call of CreatePaymentMethodStripeSetupIntent.
func (mr *MockBillingApiMockRecorder) CreatePaymentMethodStripeSetupIntent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentMethodStripeSetupIntent", reflect.TypeOf((*MockBillingApi)(nil).CreatePaymentMethodStripeSetupIntent), ctx)
}

// CreatePaymentMethodStripeSetupIntentExecute mocks base method.
func (m *MockBillingApi) CreatePaymentMethodStripeSetupIntentExecute(r api_client_go.ApiCreatePaymentMethodStripeSetupIntentRequest) (*api_client_go.StripeSetupIntent, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentMethodStripeSetupIntentExecute", r)
	ret0, _ := ret[0].(*api_client_go.StripeSetupIntent)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePaymentMethodStripeSetupIntentExecute indicates an expected call of CreatePaymentMethodStripeSetupIntentExecute.
func (mr *MockBillingApiMockRecorder) CreatePaymentMethodStripeSetupIntentExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentMethodStripeSetupIntentExecute", reflect.TypeOf((*MockBillingApi)(nil).CreatePaymentMethodStripeSetupIntentExecute), r)
}

// CreateSubscription mocks base method.
func (m *MockBillingApi) CreateSubscription(ctx context.Context) api_client_go.ApiCreateSubscriptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx)
	ret0, _ := ret[0].(api_client_go.ApiCreateSubscriptionRequest)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockBillingApiMockRecorder) CreateSubscription(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockBillingApi)(nil).CreateSubscription), ctx)
}

// CreateSubscriptionExecute mocks base method.
func (m *MockBillingApi) CreateSubscriptionExecute(r api_client_go.ApiCreateSubscriptionRequest) (*api_client_go.Subscription, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionExecute", r)
	ret0, _ := ret[0].(*api_client_go.Subscription)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSubscriptionExecute indicates an expected call of CreateSubscriptionExecute.
func (mr *MockBillingApiMockRecorder) CreateSubscriptionExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionExecute", reflect.TypeOf((*MockBillingApi)(nil).CreateSubscriptionExecute), r)
}

// DeletePaymentMethod mocks base method.
func (m *MockBillingApi) DeletePaymentMethod(ctx context.Context, paymentMethodID string) api_client_go.ApiDeletePaymentMethodRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentMethod", ctx, paymentMethodID)
	ret0, _ := ret[0].(api_client_go.ApiDeletePaymentMethodRequest)
	return ret0
}

// DeletePaymentMethod indicates an expected call of DeletePaymentMethod.
func (mr *MockBillingApiMockRecorder) DeletePaymentMethod(ctx, paymentMethodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentMethod", reflect.TypeOf((*MockBillingApi)(nil).DeletePaymentMethod), ctx, paymentMethodID)
}

// DeletePaymentMethodExecute mocks base method.
func (m *MockBillingApi) DeletePaymentMethodExecute(r api_client_go.ApiDeletePaymentMethodRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentMethodExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePaymentMethodExecute indicates an expected call of DeletePaymentMethodExecute.
func (mr *MockBillingApiMockRecorder) DeletePaymentMethodExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentMethodExecute", reflect.TypeOf((*MockBillingApi)(nil).DeletePaymentMethodExecute), r)
}

// GetBillingAccount mocks base method.
func (m *MockBillingApi) GetBillingAccount(ctx context.Context) api_client_go.ApiGetBillingAccountRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAccount", ctx)
	ret0, _ := ret[0].(api_client_go.ApiGetBillingAccountRequest)
	return ret0
}

// GetBillingAccount indicates an expected call of GetBillingAccount.
func (mr *MockBillingApiMockRecorder) GetBillingAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAccount", reflect.TypeOf((*MockBillingApi)(nil).GetBillingAccount), ctx)
}

// GetBillingAccountExecute mocks base method.
func (m *MockBillingApi) GetBillingAccountExecute(r api_client_go.ApiGetBillingAccountRequest) (*api_client_go.BillingAccount, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAccountExecute", r)
	ret0, _ := ret[0].(*api_client_go.BillingAccount)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBillingAccountExecute indicates an expected call of GetBillingAccountExecute.
func (mr *MockBillingApiMockRecorder) GetBillingAccountExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAccountExecute", reflect.TypeOf((*MockBillingApi)(nil).GetBillingAccountExecute), r)
}

// GetBillingBundle mocks base method.
func (m *MockBillingApi) GetBillingBundle(ctx context.Context, bundleID string) api_client_go.ApiGetBillingBundleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingBundle", ctx, bundleID)
	ret0, _ := ret[0].(api_client_go.ApiGetBillingBundleRequest)
	return ret0
}

// GetBillingBundle indicates an expected call of GetBillingBundle.
func (mr *MockBillingApiMockRecorder) GetBillingBundle(ctx, bundleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingBundle", reflect.TypeOf((*MockBillingApi)(nil).GetBillingBundle), ctx, bundleID)
}

// GetBillingBundleExecute mocks base method.
func (m *MockBillingApi) GetBillingBundleExecute(r api_client_go.ApiGetBillingBundleRequest) (*api_client_go.Bundle, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingBundleExecute", r)
	ret0, _ := ret[0].(*api_client_go.Bundle)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBillingBundleExecute indicates an expected call of GetBillingBundleExecute.
func (mr *MockBillingApiMockRecorder) GetBillingBundleExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingBundleExecute", reflect.TypeOf((*MockBillingApi)(nil).GetBillingBundleExecute), r)
}

// GetBillingPaymentOption mocks base method.
func (m *MockBillingApi) GetBillingPaymentOption(ctx context.Context, paymentOptionID string) api_client_go.ApiGetBillingPaymentOptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingPaymentOption", ctx, paymentOptionID)
	ret0, _ := ret[0].(api_client_go.ApiGetBillingPaymentOptionRequest)
	return ret0
}

// GetBillingPaymentOption indicates an expected call of GetBillingPaymentOption.
func (mr *MockBillingApiMockRecorder) GetBillingPaymentOption(ctx, paymentOptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingPaymentOption", reflect.TypeOf((*MockBillingApi)(nil).GetBillingPaymentOption), ctx, paymentOptionID)
}

// GetBillingPaymentOptionExecute mocks base method.
func (m *MockBillingApi) GetBillingPaymentOptionExecute(r api_client_go.ApiGetBillingPaymentOptionRequest) (*api_client_go.PaymentOption, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingPaymentOptionExecute", r)
	ret0, _ := ret[0].(*api_client_go.PaymentOption)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBillingPaymentOptionExecute indicates an expected call of GetBillingPaymentOptionExecute.
func (mr *MockBillingApiMockRecorder) GetBillingPaymentOptionExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingPaymentOptionExecute", reflect.TypeOf((*MockBillingApi)(nil).GetBillingPaymentOptionExecute), r)
}

// GetBillingProduct mocks base method.
func (m *MockBillingApi) GetBillingProduct(ctx context.Context, productID string) api_client_go.ApiGetBillingProductRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingProduct", ctx, productID)
	ret0, _ := ret[0].(api_client_go.ApiGetBillingProductRequest)
	return ret0
}

// GetBillingProduct indicates an expected call of GetBillingProduct.
func (mr *MockBillingApiMockRecorder) GetBillingProduct(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingProduct", reflect.TypeOf((*MockBillingApi)(nil).GetBillingProduct), ctx, productID)
}

// GetBillingProductExecute mocks base method.
func (m *MockBillingApi) GetBillingProductExecute(r api_client_go.ApiGetBillingProductRequest) (*api_client_go.Product, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingProductExecute", r)
	ret0, _ := ret[0].(*api_client_go.Product)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBillingProductExecute indicates an expected call of GetBillingProductExecute.
func (mr *MockBillingApiMockRecorder) GetBillingProductExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingProductExecute", reflect.TypeOf((*MockBillingApi)(nil).GetBillingProductExecute), r)
}

// GetPaymentMethod mocks base method.
func (m *MockBillingApi) GetPaymentMethod(ctx context.Context, paymentMethodID string) api_client_go.ApiGetPaymentMethodRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethod", ctx, paymentMethodID)
	ret0, _ := ret[0].(api_client_go.ApiGetPaymentMethodRequest)
	return ret0
}

// GetPaymentMethod indicates an expected call of GetPaymentMethod.
func (mr *MockBillingApiMockRecorder) GetPaymentMethod(ctx, paymentMethodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethod", reflect.TypeOf((*MockBillingApi)(nil).GetPaymentMethod), ctx, paymentMethodID)
}

// GetPaymentMethodExecute mocks base method.
func (m *MockBillingApi) GetPaymentMethodExecute(r api_client_go.ApiGetPaymentMethodRequest) (*api_client_go.PaymentMethod, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethodExecute", r)
	ret0, _ := ret[0].(*api_client_go.PaymentMethod)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaymentMethodExecute indicates an expected call of GetPaymentMethodExecute.
func (mr *MockBillingApiMockRecorder) GetPaymentMethodExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodExecute", reflect.TypeOf((*MockBillingApi)(nil).GetPaymentMethodExecute), r)
}

// GetSubscription mocks base method.
func (m *MockBillingApi) GetSubscription(ctx context.Context, subscriptionID string) api_client_go.ApiGetSubscriptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(api_client_go.ApiGetSubscriptionRequest)
	return ret0
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockBillingApiMockRecorder) GetSubscription(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockBillingApi)(nil).GetSubscription), ctx, subscriptionID)
}

// GetSubscriptionExecute mocks base method.
func (m *MockBillingApi) GetSubscriptionExecute(r api_client_go.ApiGetSubscriptionRequest) (*api_client_go.Subscription, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionExecute", r)
	ret0, _ := ret[0].(*api_client_go.Subscription)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubscriptionExecute indicates an expected call of GetSubscriptionExecute.
func (mr *MockBillingApiMockRecorder) GetSubscriptionExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionExecute", reflect.TypeOf((*MockBillingApi)(nil).GetSubscriptionExecute), r)
}

// GetSubscriptionItem mocks base method.
func (m *MockBillingApi) GetSubscriptionItem(ctx context.Context, subscriptionItemID string) api_client_go.ApiGetSubscriptionItemRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionItem", ctx, subscriptionItemID)
	ret0, _ := ret[0].(api_client_go.ApiGetSubscriptionItemRequest)
	return ret0
}

// GetSubscriptionItem indicates an expected call of GetSubscriptionItem.
func (mr *MockBillingApiMockRecorder) GetSubscriptionItem(ctx, subscriptionItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionItem", reflect.TypeOf((*MockBillingApi)(nil).GetSubscriptionItem), ctx, subscriptionItemID)
}

// GetSubscriptionItemExecute mocks base method.
func (m *MockBillingApi) GetSubscriptionItemExecute(r api_client_go.ApiGetSubscriptionItemRequest) (*api_client_go.SubscriptionItem, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionItemExecute", r)
	ret0, _ := ret[0].(*api_client_go.SubscriptionItem)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubscriptionItemExecute indicates an expected call of GetSubscriptionItemExecute.
func (mr *MockBillingApiMockRecorder) GetSubscriptionItemExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionItemExecute", reflect.TypeOf((*MockBillingApi)(nil).GetSubscriptionItemExecute), r)
}

// ListBillingBundles mocks base method.
func (m *MockBillingApi) ListBillingBundles(ctx context.Context) api_client_go.ApiListBillingBundlesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingBundles", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListBillingBundlesRequest)
	return ret0
}

// ListBillingBundles indicates an expected call of ListBillingBundles.
func (mr *MockBillingApiMockRecorder) ListBillingBundles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingBundles", reflect.TypeOf((*MockBillingApi)(nil).ListBillingBundles), ctx)
}

// ListBillingBundlesExecute mocks base method.
func (m *MockBillingApi) ListBillingBundlesExecute(r api_client_go.ApiListBillingBundlesRequest) ([]api_client_go.Bundle, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingBundlesExecute", r)
	ret0, _ := ret[0].([]api_client_go.Bundle)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBillingBundlesExecute indicates an expected call of ListBillingBundlesExecute.
func (mr *MockBillingApiMockRecorder) ListBillingBundlesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingBundlesExecute", reflect.TypeOf((*MockBillingApi)(nil).ListBillingBundlesExecute), r)
}

// ListBillingFeatures mocks base method.
func (m *MockBillingApi) ListBillingFeatures(ctx context.Context) api_client_go.ApiListBillingFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingFeatures", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListBillingFeaturesRequest)
	return ret0
}

// ListBillingFeatures indicates an expected call of ListBillingFeatures.
func (mr *MockBillingApiMockRecorder) ListBillingFeatures(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingFeatures", reflect.TypeOf((*MockBillingApi)(nil).ListBillingFeatures), ctx)
}

// ListBillingFeaturesExecute mocks base method.
func (m *MockBillingApi) ListBillingFeaturesExecute(r api_client_go.ApiListBillingFeaturesRequest) ([]api_client_go.BillingFeature, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingFeaturesExecute", r)
	ret0, _ := ret[0].([]api_client_go.BillingFeature)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBillingFeaturesExecute indicates an expected call of ListBillingFeaturesExecute.
func (mr *MockBillingApiMockRecorder) ListBillingFeaturesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingFeaturesExecute", reflect.TypeOf((*MockBillingApi)(nil).ListBillingFeaturesExecute), r)
}

// ListBillingPaymentOptions mocks base method.
func (m *MockBillingApi) ListBillingPaymentOptions(ctx context.Context) api_client_go.ApiListBillingPaymentOptionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingPaymentOptions", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListBillingPaymentOptionsRequest)
	return ret0
}

// ListBillingPaymentOptions indicates an expected call of ListBillingPaymentOptions.
func (mr *MockBillingApiMockRecorder) ListBillingPaymentOptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingPaymentOptions", reflect.TypeOf((*MockBillingApi)(nil).ListBillingPaymentOptions), ctx)
}

// ListBillingPaymentOptionsExecute mocks base method.
func (m *MockBillingApi) ListBillingPaymentOptionsExecute(r api_client_go.ApiListBillingPaymentOptionsRequest) ([]api_client_go.PaymentOption, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingPaymentOptionsExecute", r)
	ret0, _ := ret[0].([]api_client_go.PaymentOption)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBillingPaymentOptionsExecute indicates an expected call of ListBillingPaymentOptionsExecute.
func (mr *MockBillingApiMockRecorder) ListBillingPaymentOptionsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingPaymentOptionsExecute", reflect.TypeOf((*MockBillingApi)(nil).ListBillingPaymentOptionsExecute), r)
}

// ListBillingProducts mocks base method.
func (m *MockBillingApi) ListBillingProducts(ctx context.Context) api_client_go.ApiListBillingProductsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingProducts", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListBillingProductsRequest)
	return ret0
}

// ListBillingProducts indicates an expected call of ListBillingProducts.
func (mr *MockBillingApiMockRecorder) ListBillingProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingProducts", reflect.TypeOf((*MockBillingApi)(nil).ListBillingProducts), ctx)
}

// ListBillingProductsExecute mocks base method.
func (m *MockBillingApi) ListBillingProductsExecute(r api_client_go.ApiListBillingProductsRequest) ([]api_client_go.Product, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingProductsExecute", r)
	ret0, _ := ret[0].([]api_client_go.Product)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBillingProductsExecute indicates an expected call of ListBillingProductsExecute.
func (mr *MockBillingApiMockRecorder) ListBillingProductsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingProductsExecute", reflect.TypeOf((*MockBillingApi)(nil).ListBillingProductsExecute), r)
}

// ListPaymentMethods mocks base method.
func (m *MockBillingApi) ListPaymentMethods(ctx context.Context) api_client_go.ApiListPaymentMethodsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethods", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListPaymentMethodsRequest)
	return ret0
}

// ListPaymentMethods indicates an expected call of ListPaymentMethods.
func (mr *MockBillingApiMockRecorder) ListPaymentMethods(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethods", reflect.TypeOf((*MockBillingApi)(nil).ListPaymentMethods), ctx)
}

// ListPaymentMethodsExecute mocks base method.
func (m *MockBillingApi) ListPaymentMethodsExecute(r api_client_go.ApiListPaymentMethodsRequest) ([]api_client_go.PaymentMethod, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethodsExecute", r)
	ret0, _ := ret[0].([]api_client_go.PaymentMethod)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaymentMethodsExecute indicates an expected call of ListPaymentMethodsExecute.
func (mr *MockBillingApiMockRecorder) ListPaymentMethodsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethodsExecute", reflect.TypeOf((*MockBillingApi)(nil).ListPaymentMethodsExecute), r)
}

// ListSubscriptionItems mocks base method.
func (m *MockBillingApi) ListSubscriptionItems(ctx context.Context) api_client_go.ApiListSubscriptionItemsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionItems", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListSubscriptionItemsRequest)
	return ret0
}

// ListSubscriptionItems indicates an expected call of ListSubscriptionItems.
func (mr *MockBillingApiMockRecorder) ListSubscriptionItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionItems", reflect.TypeOf((*MockBillingApi)(nil).ListSubscriptionItems), ctx)
}

// ListSubscriptionItemsExecute mocks base method.
func (m *MockBillingApi) ListSubscriptionItemsExecute(r api_client_go.ApiListSubscriptionItemsRequest) ([]api_client_go.SubscriptionItem, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionItemsExecute", r)
	ret0, _ := ret[0].([]api_client_go.SubscriptionItem)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubscriptionItemsExecute indicates an expected call of ListSubscriptionItemsExecute.
func (mr *MockBillingApiMockRecorder) ListSubscriptionItemsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionItemsExecute", reflect.TypeOf((*MockBillingApi)(nil).ListSubscriptionItemsExecute), r)
}

// ListSubscriptions mocks base method.
func (m *MockBillingApi) ListSubscriptions(ctx context.Context) api_client_go.ApiListSubscriptionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx)
	ret0, _ := ret[0].(api_client_go.ApiListSubscriptionsRequest)
	return ret0
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockBillingApiMockRecorder) ListSubscriptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockBillingApi)(nil).ListSubscriptions), ctx)
}

// ListSubscriptionsExecute mocks base method.
func (m *MockBillingApi) ListSubscriptionsExecute(r api_client_go.ApiListSubscriptionsRequest) ([]api_client_go.Subscription, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptionsExecute", r)
	ret0, _ := ret[0].([]api_client_go.Subscription)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubscriptionsExecute indicates an expected call of ListSubscriptionsExecute.
func (mr *MockBillingApiMockRecorder) ListSubscriptionsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsExecute", reflect.TypeOf((*MockBillingApi)(nil).ListSubscriptionsExecute), r)
}

// ReactivateSubscription mocks base method.
func (m *MockBillingApi) ReactivateSubscription(ctx context.Context, subscriptionID string) api_client_go.ApiReactivateSubscriptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(api_client_go.ApiReactivateSubscriptionRequest)
	return ret0
}

// ReactivateSubscription indicates an expected call of ReactivateSubscription.
func (mr *MockBillingApiMockRecorder) ReactivateSubscription(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateSubscription", reflect.TypeOf((*MockBillingApi)(nil).ReactivateSubscription), ctx, subscriptionID)
}

// ReactivateSubscriptionExecute mocks base method.
func (m *MockBillingApi) ReactivateSubscriptionExecute(r api_client_go.ApiReactivateSubscriptionRequest) (*api_client_go.Subscription, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateSubscriptionExecute", r)
	ret0, _ := ret[0].(*api_client_go.Subscription)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReactivateSubscriptionExecute indicates an expected call of ReactivateSubscriptionExecute.
func (mr *MockBillingApiMockRecorder) ReactivateSubscriptionExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateSubscriptionExecute", reflect.TypeOf((*MockBillingApi)(nil).ReactivateSubscriptionExecute), r)
}

// UpdateBillingAccount mocks base method.
func (m *MockBillingApi) UpdateBillingAccount(ctx context.Context) api_client_go.ApiUpdateBillingAccountRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingAccount", ctx)
	ret0, _ := ret[0].(api_client_go.ApiUpdateBillingAccountRequest)
	return ret0
}

// UpdateBillingAccount indicates an expected call of UpdateBillingAccount.
func (mr *MockBillingApiMockRecorder) UpdateBillingAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingAccount", reflect.TypeOf((*MockBillingApi)(nil).UpdateBillingAccount), ctx)
}

// UpdateBillingAccountExecute mocks base method.
func (m *MockBillingApi) UpdateBillingAccountExecute(r api_client_go.ApiUpdateBillingAccountRequest) (*api_client_go.BillingAccount, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingAccountExecute", r)
	ret0, _ := ret[0].(*api_client_go.BillingAccount)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBillingAccountExecute indicates an expected call of UpdateBillingAccountExecute.
func (mr *MockBillingApiMockRecorder) UpdateBillingAccountExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingAccountExecute", reflect.TypeOf((*MockBillingApi)(nil).UpdateBillingAccountExecute), r)
}

// UpdateSubscriptionItem mocks base method.
func (m *MockBillingApi) UpdateSubscriptionItem(ctx context.Context, subscriptionItemID string) api_client_go.ApiUpdateSubscriptionItemRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionItem", ctx, subscriptionItemID)
	ret0, _ := ret[0].(api_client_go.ApiUpdateSubscriptionItemRequest)
	return ret0
}

// UpdateSubscriptionItem indicates an expected call of UpdateSubscriptionItem.
func (mr *MockBillingApiMockRecorder) UpdateSubscriptionItem(ctx, subscriptionItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionItem", reflect.TypeOf((*MockBillingApi)(nil).UpdateSubscriptionItem), ctx, subscriptionItemID)
}

// UpdateSubscriptionItemExecute mocks base method.
func (m *MockBillingApi) UpdateSubscriptionItemExecute(r api_client_go.ApiUpdateSubscriptionItemRequest) (*api_client_go.SubscriptionItem, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionItemExecute", r)
	ret0, _ := ret[0].(*api_client_go.SubscriptionItem)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSubscriptionItemExecute indicates an expected call of UpdateSubscriptionItemExecute.
func (mr *MockBillingApiMockRecorder) UpdateSubscriptionItemExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionItemExecute", reflect.TypeOf((*MockBillingApi)(nil).UpdateSubscriptionItemExecute), r)
}
