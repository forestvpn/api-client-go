/*
ForestVPN API

Testing DeviceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package forestvpn_api_test

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "github.com/forestvpn/api-client-go"
)

func Test_forestvpn_api_DeviceApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DeviceApiService CreateDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DeviceApi.CreateDevice(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService CreateDevicePortForwarding", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.CreateDevicePortForwarding(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService DeleteDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.DeleteDevice(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService DeleteDevicePortForwarding", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string
        var portForwardingID string

        resp, httpRes, err := apiClient.DeviceApi.DeleteDevicePortForwarding(context.Background(), deviceID, portForwardingID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService GetDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.GetDevice(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService GetDeviceStats", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string
        var statsID string

        resp, httpRes, err := apiClient.DeviceApi.GetDeviceStats(context.Background(), deviceID, statsID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService GetDeviceWireGuard", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string
        var wireGuardID string

        resp, httpRes, err := apiClient.DeviceApi.GetDeviceWireGuard(context.Background(), deviceID, wireGuardID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDeviceBindings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.ListDeviceBindings(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDeviceConnectionModes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.ListDeviceConnectionModes(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDeviceDetailStats", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.ListDeviceDetailStats(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDevicePortForwardings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.ListDevicePortForwardings(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDeviceStats", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.ListDeviceStats(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDeviceWireGuardPeers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string
        var wireGuardID string

        resp, httpRes, err := apiClient.DeviceApi.ListDeviceWireGuardPeers(context.Background(), deviceID, wireGuardID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDeviceWireGuards", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.ListDeviceWireGuards(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService ListDevices", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DeviceApi.ListDevices(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService UpdateDevice", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string

        resp, httpRes, err := apiClient.DeviceApi.UpdateDevice(context.Background(), deviceID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DeviceApiService UpdateDevicePortForwarding", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var deviceID string
        var portForwardingID string

        resp, httpRes, err := apiClient.DeviceApi.UpdateDevicePortForwarding(context.Background(), deviceID, portForwardingID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
