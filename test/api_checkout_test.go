/*
ForestVPN API

Testing CheckoutApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package forestvpn_api

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_forestvpn_api_CheckoutApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test CheckoutApiService ApplyCouponCheckoutSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.ApplyCouponCheckoutSession(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService CreateCheckoutSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.CheckoutApi.CreateCheckoutSession(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService CreateWaitListRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.CheckoutApi.CreateWaitListRequest(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService ExpireCheckoutSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.ExpireCheckoutSession(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService GetCheckoutSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.GetCheckoutSession(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService GetStripeCheckoutSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.GetStripeCheckoutSession(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService GetStripePaymentIntent", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.GetStripePaymentIntent(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService ProcessCloudPaymentsAuth", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.ProcessCloudPaymentsAuth(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test CheckoutApiService ProcessCloudPaymentsPost3ds", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionID string

        resp, httpRes, err := apiClient.CheckoutApi.ProcessCloudPaymentsPost3ds(context.Background(), sessionID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
