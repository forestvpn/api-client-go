/*
ForestVPN API

Testing AuthApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package forestvpn_api_test

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "github.com/forestvpn/api-client-go"
)

func Test_forestvpn_api_AuthApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test AuthApiService AuthorizeAccessTokenRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestID string

        resp, httpRes, err := apiClient.AuthApi.AuthorizeAccessTokenRequest(context.Background(), requestID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService CreateAccessTokenRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.CreateAccessTokenRequest(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService GetAccessTokenRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestID string

        resp, httpRes, err := apiClient.AuthApi.GetAccessTokenRequest(context.Background(), requestID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService LoginToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.LoginToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService MigrateLegacyAuth", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.MigrateLegacyAuth(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService ObtainToken", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.ObtainToken(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService RevokeAccessTokenRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestID string

        resp, httpRes, err := apiClient.AuthApi.RevokeAccessTokenRequest(context.Background(), requestID).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService UpdateUserProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.UpdateUserProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService UserProfile", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.UserProfile(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AuthApiService WhoAmI", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AuthApi.WhoAmI(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
