/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type FcmApi interface {

	/*
	CreateFCMDevice Device registration for push notification through out Firebase Cloud Messaging

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateFCMDeviceRequest
	*/
	CreateFCMDevice(ctx context.Context) ApiCreateFCMDeviceRequest

	// CreateFCMDeviceExecute executes the request
	//  @return FCMDevice
	CreateFCMDeviceExecute(r ApiCreateFCMDeviceRequest) (*FCMDevice, *http.Response, error)

	/*
	DeleteFCMDevice Delete fcm device

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrationID
	@return ApiDeleteFCMDeviceRequest
	*/
	DeleteFCMDevice(ctx context.Context, registrationID string) ApiDeleteFCMDeviceRequest

	// DeleteFCMDeviceExecute executes the request
	DeleteFCMDeviceExecute(r ApiDeleteFCMDeviceRequest) (*http.Response, error)

	/*
	GetFCMDevice Device info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrationID
	@return ApiGetFCMDeviceRequest
	*/
	GetFCMDevice(ctx context.Context, registrationID string) ApiGetFCMDeviceRequest

	// GetFCMDeviceExecute executes the request
	//  @return FCMDevice
	GetFCMDeviceExecute(r ApiGetFCMDeviceRequest) (*FCMDevice, *http.Response, error)

	/*
	UpdateFCMDevice Update device fcm properties

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param registrationID
	@return ApiUpdateFCMDeviceRequest
	*/
	UpdateFCMDevice(ctx context.Context, registrationID string) ApiUpdateFCMDeviceRequest

	// UpdateFCMDeviceExecute executes the request
	//  @return FCMDevice
	UpdateFCMDeviceExecute(r ApiUpdateFCMDeviceRequest) (*FCMDevice, *http.Response, error)
}

// FcmApiService FcmApi service
type FcmApiService service

type ApiCreateFCMDeviceRequest struct {
	ctx context.Context
	ApiService FcmApi
	createFCMDeviceRequest *CreateFCMDeviceRequest
}

func (r ApiCreateFCMDeviceRequest) CreateFCMDeviceRequest(createFCMDeviceRequest CreateFCMDeviceRequest) ApiCreateFCMDeviceRequest {
	r.createFCMDeviceRequest = &createFCMDeviceRequest
	return r
}

func (r ApiCreateFCMDeviceRequest) Execute() (*FCMDevice, *http.Response, error) {
	return r.ApiService.CreateFCMDeviceExecute(r)
}

/*
CreateFCMDevice Device registration for push notification through out Firebase Cloud Messaging

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateFCMDeviceRequest
*/
func (a *FcmApiService) CreateFCMDevice(ctx context.Context) ApiCreateFCMDeviceRequest {
	return ApiCreateFCMDeviceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FCMDevice
func (a *FcmApiService) CreateFCMDeviceExecute(r ApiCreateFCMDeviceRequest) (*FCMDevice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FCMDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FcmApiService.CreateFCMDevice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification/fcm/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFCMDeviceRequest == nil {
		return localVarReturnValue, nil, reportError("createFCMDeviceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFCMDeviceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFCMDeviceRequest struct {
	ctx context.Context
	ApiService FcmApi
	registrationID string
}

func (r ApiDeleteFCMDeviceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFCMDeviceExecute(r)
}

/*
DeleteFCMDevice Delete fcm device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrationID
 @return ApiDeleteFCMDeviceRequest
*/
func (a *FcmApiService) DeleteFCMDevice(ctx context.Context, registrationID string) ApiDeleteFCMDeviceRequest {
	return ApiDeleteFCMDeviceRequest{
		ApiService: a,
		ctx: ctx,
		registrationID: registrationID,
	}
}

// Execute executes the request
func (a *FcmApiService) DeleteFCMDeviceExecute(r ApiDeleteFCMDeviceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FcmApiService.DeleteFCMDevice")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification/fcm/{registrationID}/"
	localVarPath = strings.Replace(localVarPath, "{"+"registrationID"+"}", url.PathEscape(parameterToString(r.registrationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFCMDeviceRequest struct {
	ctx context.Context
	ApiService FcmApi
	registrationID string
}

func (r ApiGetFCMDeviceRequest) Execute() (*FCMDevice, *http.Response, error) {
	return r.ApiService.GetFCMDeviceExecute(r)
}

/*
GetFCMDevice Device info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrationID
 @return ApiGetFCMDeviceRequest
*/
func (a *FcmApiService) GetFCMDevice(ctx context.Context, registrationID string) ApiGetFCMDeviceRequest {
	return ApiGetFCMDeviceRequest{
		ApiService: a,
		ctx: ctx,
		registrationID: registrationID,
	}
}

// Execute executes the request
//  @return FCMDevice
func (a *FcmApiService) GetFCMDeviceExecute(r ApiGetFCMDeviceRequest) (*FCMDevice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FCMDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FcmApiService.GetFCMDevice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification/fcm/{registrationID}/"
	localVarPath = strings.Replace(localVarPath, "{"+"registrationID"+"}", url.PathEscape(parameterToString(r.registrationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFCMDeviceRequest struct {
	ctx context.Context
	ApiService FcmApi
	registrationID string
	updateFCMDeviceRequest *UpdateFCMDeviceRequest
}

func (r ApiUpdateFCMDeviceRequest) UpdateFCMDeviceRequest(updateFCMDeviceRequest UpdateFCMDeviceRequest) ApiUpdateFCMDeviceRequest {
	r.updateFCMDeviceRequest = &updateFCMDeviceRequest
	return r
}

func (r ApiUpdateFCMDeviceRequest) Execute() (*FCMDevice, *http.Response, error) {
	return r.ApiService.UpdateFCMDeviceExecute(r)
}

/*
UpdateFCMDevice Update device fcm properties

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrationID
 @return ApiUpdateFCMDeviceRequest
*/
func (a *FcmApiService) UpdateFCMDevice(ctx context.Context, registrationID string) ApiUpdateFCMDeviceRequest {
	return ApiUpdateFCMDeviceRequest{
		ApiService: a,
		ctx: ctx,
		registrationID: registrationID,
	}
}

// Execute executes the request
//  @return FCMDevice
func (a *FcmApiService) UpdateFCMDeviceExecute(r ApiUpdateFCMDeviceRequest) (*FCMDevice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FCMDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FcmApiService.UpdateFCMDevice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification/fcm/{registrationID}/"
	localVarPath = strings.Replace(localVarPath, "{"+"registrationID"+"}", url.PathEscape(parameterToString(r.registrationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateFCMDeviceRequest == nil {
		return localVarReturnValue, nil, reportError("updateFCMDeviceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateFCMDeviceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
