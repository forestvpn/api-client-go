/*
ForestVPN API

ForestVPN - Fast, secure, and modern VPN. It offers Distributed Computing, Crypto Mining, P2P, Ad Blocking, TOR over VPN, 30+ locations, and a free version with unlimited data. 

API version: 2.0
Contact: support@forestvpn.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package forestvpn_api

import (
	"encoding/json"
)

// checks if the StripeCheckoutSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeCheckoutSession{}

// StripeCheckoutSession struct for StripeCheckoutSession
type StripeCheckoutSession struct {
	SessionId string `json:"session_id"`
	SuccessUrl string `json:"success_url"`
	CancelUrl string `json:"cancel_url"`
}

// NewStripeCheckoutSession instantiates a new StripeCheckoutSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeCheckoutSession(sessionId string, successUrl string, cancelUrl string) *StripeCheckoutSession {
	this := StripeCheckoutSession{}
	this.SessionId = sessionId
	this.SuccessUrl = successUrl
	this.CancelUrl = cancelUrl
	return &this
}

// NewStripeCheckoutSessionWithDefaults instantiates a new StripeCheckoutSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeCheckoutSessionWithDefaults() *StripeCheckoutSession {
	this := StripeCheckoutSession{}
	return &this
}

// GetSessionId returns the SessionId field value
func (o *StripeCheckoutSession) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *StripeCheckoutSession) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *StripeCheckoutSession) SetSessionId(v string) {
	o.SessionId = v
}

// GetSuccessUrl returns the SuccessUrl field value
func (o *StripeCheckoutSession) GetSuccessUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuccessUrl
}

// GetSuccessUrlOk returns a tuple with the SuccessUrl field value
// and a boolean to check if the value has been set.
func (o *StripeCheckoutSession) GetSuccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessUrl, true
}

// SetSuccessUrl sets field value
func (o *StripeCheckoutSession) SetSuccessUrl(v string) {
	o.SuccessUrl = v
}

// GetCancelUrl returns the CancelUrl field value
func (o *StripeCheckoutSession) GetCancelUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value
// and a boolean to check if the value has been set.
func (o *StripeCheckoutSession) GetCancelUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelUrl, true
}

// SetCancelUrl sets field value
func (o *StripeCheckoutSession) SetCancelUrl(v string) {
	o.CancelUrl = v
}

func (o StripeCheckoutSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeCheckoutSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["session_id"] = o.SessionId
	toSerialize["success_url"] = o.SuccessUrl
	toSerialize["cancel_url"] = o.CancelUrl
	return toSerialize, nil
}

type NullableStripeCheckoutSession struct {
	value *StripeCheckoutSession
	isSet bool
}

func (v NullableStripeCheckoutSession) Get() *StripeCheckoutSession {
	return v.value
}

func (v *NullableStripeCheckoutSession) Set(val *StripeCheckoutSession) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeCheckoutSession) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeCheckoutSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeCheckoutSession(val *StripeCheckoutSession) *NullableStripeCheckoutSession {
	return &NullableStripeCheckoutSession{value: val, isSet: true}
}

func (v NullableStripeCheckoutSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeCheckoutSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


